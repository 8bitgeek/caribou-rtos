/******************************************************************************
* Copyright Â© 2005-2012 by Pike Aerospace Research Corporation
* All Rights Reserved
*
*   This file is part of CARIBOU RTOS
*
*   CARIBOU RTOS is free software: you can redistribute it and/or modify
*   it under the terms of the Beerware License Version 43.
*
* ----------------------------------------------------------------------------
* "THE BEER-WARE LICENSE" (Revision 43):
* <mike@pikeaero.com> wrote this file. As long as you retain this notice you
* can do whatever you want with this stuff. If we meet some day, and you think
* this stuff is worth it, you can buy me a beer in return ~ Mike Sharkey
* ----------------------------------------------------------------------------
******************************************************************************/
#ifndef _CARIBOU_THREAD_H_
#define _CARIBOU_THREAD_H_

#include <caribou/kernel/types.h>
#include <caribou/kernel/timer.h>
#include <caribou/lib/errno.h>

#ifdef __cplusplus
extern "C"
{
#endif

// A thread structure.
typedef struct _caribou_thread_t
{
	//struct _caribou_thread_t*	prev;		/// previous in chain.
	struct _caribou_thread_t*	next;		/// next in chain
	struct _caribou_thread_t*	parent;		/// parent node
	void*						sp;		/// this thread's stored stack pointer
	void*						stack_usage;/// most stack usage seen.
	void*						stack_low;	/// stack low water mark.
	void*						stack_top;	/// stack top
	void*						stack_base;	/// stack bottom
	uint16_t					state;		/// state flags
	int16_t						prio;		/// thread priority (# of jiffies)
	const char*					name;		/// the name of the tread or NULL
	void*						arg;		/// the arg passed to thread_create().
	uint64_t					runtime;	/// run time in jiffies.
	int16_t						lock;		/// thread lock count
	void						(*finishfn)(void*);
	caribou_timer_t*			timer;		/// timer list that belong to this thread.
	errno_t						errno;		/// the errno for the thread.
} caribou_thread_t;

#define CARIBOU_THREAD_DEF_STKSZ		1024
#define CARIBOU_THREAD_LOWPRIO			0
#define CARIBOU_THREAD_NORMALPRIO		1
#define CARIBOU_THREAD_HIGHPRIO			2
#define CARIBOU_THREAD_DEF_PRIO			CARIBOU_THREAD_LOWPRIO
/* thread state flags */
#define CARIBOU_THREAD_F_SLEEP			0x0001
#define CARIBOU_THREAD_F_YIELD			0x0002
#define CARIBOU_THREAD_F_TERMINATED		0x0004

#define CARIBOU_THREAD_F_IDLE_MASK		(CARIBOU_THREAD_F_YIELD | CARIBOU_THREAD_F_TERMINATED)

#define	THREAD_FAULT_STACK_LOW			0x0001
#define	THREAD_FAULT_STACK_UNDERFLOW	0x0002
#define	THREAD_FAULT_STACK_OVERFLOW		0x0004
#define	THREAD_FAULT_ALLOC_FAILURE		0x0008
#define THREAD_FAULT_HEAP_CORRUPT		0x0010

/* @brief Yield CPU time while expression is true */
#define caribou_thread_yield_while(e) while(e) caribou_thread_yield()

extern caribou_thread_t*	caribou_thread_init(int16_t priority); // initialize the main thread
extern void					caribou_thread_fault_set(void* (*fn)(int, void*),void* arg);
extern caribou_thread_t*	caribou_thread_create(const char* name, void (*run)(void*), void (*finish)(void*), void * arg, void * stackaddr, int stack_size, int16_t priority );
extern void					caribou_thread_set_priority(caribou_thread_t* thread, int16_t priority );
extern bool					caribou_thread_yield(void);
extern void					caribou_thread_finish(void);
extern void					caribou_thread_terminate(caribou_thread_t* thread);
extern caribou_thread_t*	caribou_thread_root(void);
extern caribou_thread_t*	caribou_thread_current(void);
extern void*				caribou_thread_current_arg(void);
extern caribou_thread_t*	caribou_thread_parent(caribou_thread_t* thread);
extern caribou_thread_t*	caribou_thread_first(void);
extern int					caribou_thread_count(void);
extern void					caribou_thread_schedule(caribou_thread_t* thread);

extern const char*			caribou_thread_set_name(caribou_thread_t* thread, const char* name);  /* caller owns char* name pointer */
extern const char*			caribou_thread_name(caribou_thread_t* thread);
extern uint64_t				caribou_thread_runtime(caribou_thread_t* thread);
extern uint32_t				caribou_thread_stacksize(caribou_thread_t* thread);
extern uint32_t				caribou_thread_stackusage(caribou_thread_t* thread);
extern int16_t				caribou_thread_priority(caribou_thread_t* thread);
extern uint16_t				caribou_thread_state(caribou_thread_t* thread);

extern int					caribou_thread_lock(void);
extern int					caribou_thread_unlock(void);
extern int					caribou_thread_locked(caribou_thread_t* thread);

extern void					caribou_thread_sleep_current(int32_t ticks);
extern void					caribou_thread_sleep(caribou_thread_t* thread, int32_t ticks);
extern void					caribou_thread_wakeup(caribou_thread_t* thread);

extern void					caribou_thread_dump();				/// for debugging, dump the thread list to stdout
extern void					caribou_thread_wfi();				/// wait for interrupt

extern void					caribou_thread_once();				/// main thread exec loop - used by CARIBOU
extern void					caribou_thread_exec();				/// main thread exec loop - used by CARIBOU

extern int					caribou_timer_idle(caribou_thread_t* thread); // Used internally by CARUBOU for idle time processing


#ifdef __cplusplus
}
#endif

#endif
