/******************************************************************************
* Copyright Â© 2005-2012 by Pike Aerospace Research Corporation
* All Rights Reserved
*
*   This file is part of CARIBOU RTOS
*
*   CARIBOU RTOS is free software: you can redistribute it and/or modify
*   it under the terms of the Beerware License Version 43.
*
* ----------------------------------------------------------------------------
* "THE BEER-WARE LICENSE" (Revision 43):
* <mike@pikeaero.com> wrote this file. As long as you retain this notice you
* can do whatever you want with this stuff. If we meet some day, and you think
* this stuff is worth it, you can buy me a beer in return ~ Mike Sharkey
* ----------------------------------------------------------------------------
******************************************************************************/
#include <caribou.h>
#include <chip/chip.h>

/** ***************************************************************************
 ** @return The Caribou Version. 
 ******************************************************************************/
extern const char* caribou_version()
{
	return CARIBOU_VERSION;
}

extern void _halt();

/** ***************************************************************************
 ** @brief Test the state of the CARIBOU scheduler lock.
 ** @return The number of lock state
 *****************************************************************************/
extern int caribou_lock_state()
{
	return chip_systick_irq_state();
}

/** ***************************************************************************
 ** @brief Lock the CARIBOU scheduler onto current thread. 
 ******************************************************************************/
extern int caribou_lock()
{
	return chip_systick_irq_disable();
}

/** ***************************************************************************
 ** @brief Unlock the CARIBOU scheduler. 
 ******************************************************************************/
extern int caribou_unlock()
{
	return chip_systick_irq_enable();
}

/** ***************************************************************************
 ** @brief Set the CARIBOU scheduler lock state. 
 ******************************************************************************/
extern void caribou_lock_set(int state)
{
	chip_systick_irq_set(state);
}

/** ***************************************************************************
 ** @brief Force scheduler to perform a context switch.
 ******************************************************************************/
extern void caribou_preempt()
{
	chip_systick_irq_force();
}

/** ***************************************************************************
 ** @brief Abort on hard fault.
 ******************************************************************************/
__attribute__((weak)) void abort(void)
{
	printf("**** ABORT ****\n");
	caribou_thread_dump();
	_halt();
}

/*****************************************************************************
 * @brief Main thread execution
 *****************************************************************************/
 void caribou_exec(void)
 {
	caribou_thread_exec(); /// never to return.
 }

/*****************************************************************************
 ** @brief Initialize CARIBOU
 ** @param priority The priority of the main thread.
 *****************************************************************************/
void caribou_init(int8_t priority)
{
	chip_interrupts_disable();
	chip_init(caribou_timer_period());
	caribou_thread_init(priority);
	chip_interrupts_enable();
}
