.TH "include/caribou/lib/semaphore.h" 3 "Thu Dec 29 2016" "Version 0.9" "CARIBOU RTOS" \" -*- nroff -*-
.ad l
.nh
.SH NAME
include/caribou/lib/semaphore.h \- 
.SH SYNOPSIS
.br
.PP
\fC#include <caribou/kernel/types\&.h>\fP
.br
\fC#include <caribou/kernel/thread\&.h>\fP
.br
\fC#include <caribou/lib/queue\&.h>\fP
.br

.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fB_caribou_semaphore_t\fP"
.br
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBDECL_CARIBOU_SEMAPHORE\fP(SEMAPHORE, COUNT)"
.br
.RI "\fIDeclare a semaphore with a thread queue depth and initial count\&. \fP"
.ti -1c
.RI "#define \fBDECL_STATIC_CARIBOU_SEMAPHORE\fP(SEMAPHORE, COUNT)"
.br
.ti -1c
.RI "#define \fBDECL_CARIBOU_BINARY_SEMAPHORE\fP(SEMAPHORE)   \fBcaribou_semaphore_t\fP SEMAPHORE={1}"
.br
.ti -1c
.RI "#define \fBCARIBOU_SEMAPHORE\fP(COUNT, DEPTH, THREADS)   {COUNT,CARABOU_QUEUE_INIT(DEPTH,THREADS)}"
.br
.RI "\fIStatic initializer with a pre-existing message queue storage\&. \fP"
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef struct \fB_caribou_semaphore_t\fP \fBcaribou_semaphore_t\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBcaribou_semaphore_t\fP * \fBcaribou_semaphore_new\fP (int count)"
.br
.RI "\fIAllocate and initialize a new semaphore on the heap\&. \fP"
.ti -1c
.RI "void \fBcaribou_semaphore_delete\fP (\fBcaribou_semaphore_t\fP *semaphore)"
.br
.ti -1c
.RI "\fBcaribou_semaphore_t\fP * \fBcaribou_semaphore_init\fP (\fBcaribou_semaphore_t\fP *semaphore, int count)"
.br
.ti -1c
.RI "\fBbool\fP \fBcaribou_semaphore_signal\fP (\fBcaribou_semaphore_t\fP *semaphore)"
.br
.RI "\fIThis operation atomically increment the semaphore counter\&. \fP"
.ti -1c
.RI "\fBbool\fP \fBcaribou_semaphore_wait\fP (\fBcaribou_semaphore_t\fP *semaphore, \fBcaribou_tick_t\fP timeout)"
.br
.RI "\fIThis operation atomically decreases the semaphore counter\&. \fP"
.ti -1c
.RI "\fBbool\fP \fBcaribou_semaphore_try_wait\fP (\fBcaribou_semaphore_t\fP *semaphore)"
.br
.RI "\fIThis operation decreases the semaphore counter\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 

.PP
.PP
\fBAuthor:\fP
.RS 4
Mike Sharkey mike@pikeaero.com\&. 
.RE
.PP
\fBCopyright:\fP
.RS 4
© 2005-2013 by Pike Aerospace Research Corporation 
.PP
© 2014-2015 by Mike Sharkey
.RE
.PP
This file is part of CARIBOU RTOS CARIBOU RTOS is free software: you can redistribute it and/or modify it under the terms of the Beerware License Version 43\&. 'THE BEER-WARE LICENSE' (Revision 43): Mike Sharkey mike@pikeaero.com wrote this file\&. As long as you retain this notice you can do whatever you want with this stuff\&. If we meet some day, and you think this stuff is worth it, you can buy me a beer in return ~ Mike Sharkey 
.PP
Definition in file \fBsemaphore\&.h\fP\&.
.SH "Macro Definition Documentation"
.PP 
.SS "#define CARIBOU_SEMAPHORE(COUNT, DEPTH, THREADS)   {COUNT,CARABOU_QUEUE_INIT(DEPTH,THREADS)}"

.PP
Static initializer with a pre-existing message queue storage\&. 
.PP
\fBParameters:\fP
.RS 4
\fICOUNT\fP The initial semaphore count\&. 
.br
\fIDEPTH\fP The depth of the threads storage\&. 
.br
\fITHREADS\fP The pre-allocate threads storage\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
A caribou_semaphore_t initializer\&. 
.RE
.PP

.PP
Definition at line 56 of file semaphore\&.h\&.
.SS "#define DECL_CARIBOU_BINARY_SEMAPHORE(SEMAPHORE)   \fBcaribou_semaphore_t\fP SEMAPHORE={1}"

.PP
Definition at line 47 of file semaphore\&.h\&.
.SS "#define DECL_CARIBOU_SEMAPHORE(SEMAPHORE, COUNT)"
\fBValue:\fP
.PP
.nf
DECL_CARIBOU_QUEUE(SEMAPHORE ## queue);                  \\
			caribou_semaphore_t SEMAPHORE={COUNT,&SEMAPHORE ## queue}
.fi
.PP
Declare a semaphore with a thread queue depth and initial count\&. 
.PP
\fBParameters:\fP
.RS 4
\fISEMAPHORE\fP The semaphore name to declare\&. 
.br
\fIDEPTH\fP The maximum depth of queued threads\&. 
.br
\fICOUNT\fP The initial semaphore count (must be >= 0)\&. 
.RE
.PP

.PP
Definition at line 39 of file semaphore\&.h\&.
.SS "#define DECL_STATIC_CARIBOU_SEMAPHORE(SEMAPHORE, COUNT)"
\fBValue:\fP
.PP
.nf
DECL_STATIC_CARIBOU_QUEUE(SEMAPHORE ## queue);           \
            static caribou_semaphore_t SEMAPHORE={COUNT,&SEMAPHORE ## queue}
.fi
.PP
Definition at line 43 of file semaphore\&.h\&.
.SH "Typedef Documentation"
.PP 
.SS "typedef struct \fB_caribou_semaphore_t\fP  \fBcaribou_semaphore_t\fP"

.SH "Function Documentation"
.PP 
.SS "void caribou_semaphore_delete (\fBcaribou_semaphore_t\fP *semaphore)"

.PP
Definition at line 37 of file semaphore\&.c\&.
.SS "\fBcaribou_semaphore_t\fP* caribou_semaphore_init (\fBcaribou_semaphore_t\fP *semaphore, intcount)"

.PP
Definition at line 45 of file semaphore\&.c\&.
.SS "\fBcaribou_semaphore_t\fP* caribou_semaphore_new (intcount)"

.PP
Allocate and initialize a new semaphore on the heap\&. 
.PP
 
.PP
\fBParameters:\fP
.RS 4
\fIdepth\fP The depth of the thread queue (max number of waiting threads)\&. 
.br
\fIcount\fP The initial semaphore count\&. 
.RE
.PP

.PP
Definition at line 27 of file semaphore\&.c\&.
.SS "\fBbool\fP caribou_semaphore_signal (\fBcaribou_semaphore_t\fP *semaphore)"

.PP
This operation atomically increment the semaphore counter\&. 
.PP
 
.PP
\fBParameters:\fP
.RS 4
\fIsemaphore\fP The semaphore to operate on\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
true if the semaphore was released\&. 
.RE
.PP

.PP
Definition at line 58 of file semaphore\&.c\&.
.SS "\fBbool\fP caribou_semaphore_try_wait (\fBcaribou_semaphore_t\fP *semaphore)"

.PP
This operation decreases the semaphore counter\&. 
.PP
 
.PP
\fBParameters:\fP
.RS 4
\fIsemaphore\fP The semaphore to operate on\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
true if the semaphore was released\&. 
.RE
.PP

.PP
Definition at line 92 of file semaphore\&.c\&.
.SS "\fBbool\fP caribou_semaphore_wait (\fBcaribou_semaphore_t\fP *semaphore, \fBcaribou_tick_t\fPtimeout)"

.PP
This operation atomically decreases the semaphore counter\&. 
.PP
 
.PP
\fBParameters:\fP
.RS 4
\fIsemaphore\fP The semaphore to operate on\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
true of the semaphore was released\&. 
.RE
.PP

.PP
Definition at line 71 of file semaphore\&.c\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for CARIBOU RTOS from the source code\&.
