.TH "src/lib/heap.c" 3 "Thu Dec 29 2016" "Version 0.9" "CARIBOU RTOS" \" -*- nroff -*-
.ad l
.nh
.SH NAME
src/lib/heap.c \- 
.SH SYNOPSIS
.br
.PP
\fC#include <caribou/lib/heap\&.h>\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "\fB__attribute__\fP ((weak))"
.br
.ti -1c
.RI "void \fBheap_init\fP (void *heap_base, void *heap_end)"
.br
.RI "\fIInitialize memory\&. \fP"
.ti -1c
.RI "int32_t \fBheap_block_size\fP ()"
.br
.RI "\fIthe number of bytes per block \fP"
.ti -1c
.RI "int32_t \fBheap_blocks_allocated\fP ()"
.br
.RI "\fItotal up all the blocks used\&. \fP"
.ti -1c
.RI "int32_t \fBheap_bytes_used\fP ()"
.br
.ti -1c
.RI "int32_t \fBheap_bytes_free\fP ()"
.br
.ti -1c
.RI "size_t \fBheap_sizeof\fP (void *p)"
.br
.ti -1c
.RI "void * \fBmalloc\fP (size_t size)"
.br
.ti -1c
.RI "void * \fBrealloc\fP (void *pointer, size_t size)"
.br
.ti -1c
.RI "void * \fBcalloc\fP (size_t nmemb, size_t size)"
.br
.ti -1c
.RI "void \fBfree\fP (void *pointer)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "uint32_t \fB__heap_start__\fP"
.br
.RI "\fIHEAP segment start\&. \fP"
.ti -1c
.RI "uint32_t \fB__heap_end__\fP"
.br
.RI "\fIHEAP segment end\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 

.PP
.PP
\fBAuthor:\fP
.RS 4
Mike Sharkey mike@pikeaero.com\&. 
.RE
.PP
\fBCopyright:\fP
.RS 4
© 2005-2013 by Pike Aerospace Research Corporation 
.PP
© 2014-2015 by Mike Sharkey
.RE
.PP
This file is part of CARIBOU RTOS CARIBOU RTOS is free software: you can redistribute it and/or modify it under the terms of the Beerware License Version 43\&. 'THE BEER-WARE LICENSE' (Revision 43): Mike Sharkey mike@pikeaero.com wrote this file\&. As long as you retain this notice you can do whatever you want with this stuff\&. If we meet some day, and you think this stuff is worth it, you can buy me a beer in return ~ Mike Sharkey 
.PP
Definition in file \fBheap\&.c\fP\&.
.SH "Function Documentation"
.PP 
.SS "__attribute__ ((weak))"
notify memory allocated
.PP
notify memory free'd
.PP
notify invalid free'd
.PP
notify invalid realloc'd
.PP
notify invalid alloc'd 
.PP
Definition at line 28 of file heap\&.c\&.
.SS "void* calloc (size_tnmemb, size_tsize)"
The \fBcalloc()\fP function allocates memory for an array of nmemb elements of size bytes each and returns a pointer to the allocated memory\&. The memory is set to zero\&. If nmemb or size is 0, then \fBcalloc()\fP returns either NULL, or a unique pointer value that can later be successfully passed to \fBfree()\fP\&. 
.PP
Definition at line 216 of file heap\&.c\&.
.SS "void free (void *pointer)"
\fBfree()\fP frees the memory space pointed to by ptr, which must have been returned by a previous call to \fBmalloc()\fP or \fBrealloc()\fP\&. Otherwise, or if free(ptr) has already been called before, undefined behavior occurs\&. If ptr is NULL, no opera‐ tion is performed\&. 
.PP
Definition at line 226 of file heap\&.c\&.
.SS "int32_t heap_block_size (void)"

.PP
the number of bytes per block 
.PP
Definition at line 161 of file heap\&.c\&.
.SS "int32_t heap_blocks_allocated (void)"

.PP
total up all the blocks used\&. 
.PP
Definition at line 169 of file heap\&.c\&.
.SS "int32_t heap_bytes_free (void)"

.PP
Definition at line 179 of file heap\&.c\&.
.SS "int32_t heap_bytes_used (void)"

.PP
Definition at line 174 of file heap\&.c\&.
.SS "void heap_init (void *heap_base, void *heap_end)"

.PP
Initialize memory\&. 
.PP
Definition at line 153 of file heap\&.c\&.
.SS "size_t heap_sizeof (void *p)"

.PP
Definition at line 185 of file heap\&.c\&.
.SS "void* malloc (size_tsize)"
\fBmalloc()\fP allocates size bytes and returns a pointer to the allocated memory\&. The memory is not cleared\&. If size is 0, then \fBmalloc()\fP returns either NULL, or a unique pointer value that can later be successfully passed to \fBfree()\fP\&. 
.PP
Definition at line 194 of file heap\&.c\&.
.SS "void* realloc (void *pointer, size_tsize)"
\fBrealloc()\fP changes the size of the memory block pointed to by ptr to size bytes\&. The contents will be unchanged to the minimum of the old and new sizes; newly allocated memory will be uninitialized\&. If ptr is NULL, then the call is equivalent to mal‐ loc(size), for all values of size; if size is equal to zero, and ptr is not NULL, then the call is equivalent to free(ptr)\&. Unless ptr is NULL, it must have been returned by an earlier call to \fBmalloc()\fP or \fBrealloc()\fP\&. If the area pointed to was moved, a free(ptr) is done\&. 
.PP
Definition at line 206 of file heap\&.c\&.
.SH "Variable Documentation"
.PP 
.SS "uint32_t __heap_end__"

.PP
HEAP segment end\&. 
.PP
\fBPrecondition:\fP
.RS 4
The symbol must be aligned to a 32 bits boundary\&. 
.RE
.PP

.SS "uint32_t __heap_start__"

.PP
HEAP segment start\&. 
.PP
\fBPrecondition:\fP
.RS 4
The symbol must be aligned to a 32 bits boundary\&. 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for CARIBOU RTOS from the source code\&.
