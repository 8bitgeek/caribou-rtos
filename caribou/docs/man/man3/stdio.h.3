.TH "include/caribou/lib/stdio.h" 3 "Sat Jul 19 2014" "Version 0.9" "CARIBOU RTOS" \" -*- nroff -*-
.ad l
.nh
.SH NAME
include/caribou/lib/stdio.h \- 
.SH SYNOPSIS
.br
.PP
\fC#include <caribou/kernel/types\&.h>\fP
.br

.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fB_stdio_t\fP"
.br
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBSTDIO_STATE_RX_PENDING\fP   0x00000001"
.br
.ti -1c
.RI "#define \fBSTDIO_STATE_TX_EMPTY\fP   0x00000002"
.br
.ti -1c
.RI "#define \fBSTDIO_STATE_OPENED\fP   0x00000004"
.br
.ti -1c
.RI "#define \fBSTDIO_STATE_RX_OVERFLOW\fP   0x00000010"
.br
.ti -1c
.RI "#define \fBFILE\fP   \fBstdio_t\fP"
.br
.ti -1c
.RI "#define \fBstdin\fP   \fB_stdin\fP"
.br
.ti -1c
.RI "#define \fBstdout\fP   \fB_stdout\fP"
.br
.ti -1c
.RI "#define \fBstderr\fP   \fB_stderr\fP"
.br
.ti -1c
.RI "#define \fBASSERT\fP(x)   if(!x) while(;;) {}"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef struct \fB_stdio_t\fP \fBstdio_t\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBFILE\fP * \fBfopen\fP (int ndev, const char *mode)"
.br
.ti -1c
.RI "int \fBfclose\fP (\fBFILE\fP *fp)"
.br
.ti -1c
.RI "int \fBfflush\fP (\fBFILE\fP *fp)"
.br
.RI "\fIFLush the stream\&. \fP"
.ti -1c
.RI "int \fBfputc\fP (int c, \fBFILE\fP *fp)"
.br
.ti -1c
.RI "int \fBfputs\fP (const char *s, \fBFILE\fP *fp)"
.br
.ti -1c
.RI "int \fBfprintf\fP (\fBFILE\fP *fp, const char *format,\&.\&.\&.)"
.br
.RI "\fIFormatted print to FILE* stream\&. \fP"
.ti -1c
.RI "int \fBprintf\fP (const char *format,\&.\&.\&.)"
.br
.RI "\fIFormatted print to FILE* stdout\&. \fP"
.ti -1c
.RI "int \fBdebug_printf\fP (const char *format,\&.\&.\&.)"
.br
.ti -1c
.RI "int \fBfwrite\fP (\fBFILE\fP *fp, char *p, size_t len)"
.br
.ti -1c
.RI "int \fBfread\fP (\fBFILE\fP *fp, char *p, size_t len)"
.br
.ti -1c
.RI "int \fBfgetc\fP (\fBFILE\fP *fp)"
.br
.RI "\fIRead a character from a stream of -1 if character not ready or eof\&. \fP"
.ti -1c
.RI "int \fBfioctl\fP (\fBFILE\fP *fp)"
.br
.ti -1c
.RI "int \fBgetchar\fP ()"
.br
.ti -1c
.RI "int \fBputchar\fP (int ch)"
.br
.ti -1c
.RI "int \fBsprintf\fP (char *str, const char *format,\&.\&.\&.)"
.br
.RI "\fIFormatted print to FILE* stream\&. \fP"
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "const \fBstdio_t\fP \fB_stdio_\fP []"
.br
.ti -1c
.RI "\fBstdio_t\fP * \fB_stdin\fP"
.br
.ti -1c
.RI "\fBstdio_t\fP * \fB_stdout\fP"
.br
.ti -1c
.RI "\fBstdio_t\fP * \fB_stderr\fP"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define ASSERT(x)   if(!x) while(;;) {}"

.PP
Definition at line 73 of file stdio\&.h\&.
.SS "#define FILE   \fBstdio_t\fP"

.PP
Definition at line 46 of file stdio\&.h\&.
.SS "#define stderr   \fB_stderr\fP"

.PP
Definition at line 49 of file stdio\&.h\&.
.SS "#define stdin   \fB_stdin\fP"

.PP
Definition at line 47 of file stdio\&.h\&.
.SS "#define STDIO_STATE_OPENED   0x00000004"

.PP
Definition at line 29 of file stdio\&.h\&.
.SS "#define STDIO_STATE_RX_OVERFLOW   0x00000010"

.PP
Definition at line 30 of file stdio\&.h\&.
.SS "#define STDIO_STATE_RX_PENDING   0x00000001"

.PP
Definition at line 27 of file stdio\&.h\&.
.SS "#define STDIO_STATE_TX_EMPTY   0x00000002"

.PP
Definition at line 28 of file stdio\&.h\&.
.SS "#define stdout   \fB_stdout\fP"

.PP
Definition at line 48 of file stdio\&.h\&.
.SH "Typedef Documentation"
.PP 
.SS "typedef struct \fB_stdio_t\fP  \fBstdio_t\fP"

.SH "Function Documentation"
.PP 
.SS "int debug_printf (const char *format, \&.\&.\&.)"

.SS "int fclose (\fBFILE\fP *fp)"

.PP
Definition at line 61 of file stdio\&.c\&.
.SS "int fflush (\fBFILE\fP *fp)"

.PP
FLush the stream\&. 
.PP
Definition at line 72 of file stdio\&.c\&.
.SS "int fgetc (\fBFILE\fP *fp)"

.PP
Read a character from a stream of -1 if character not ready or eof\&. 
.PP
Definition at line 110 of file stdio\&.c\&.
.SS "int fioctl (\fBFILE\fP *fp)"

.PP
Definition at line 370 of file stdio\&.c\&.
.SS "\fBFILE\fP* fopen (intndev, const char *mode)"

.PP
Definition at line 50 of file stdio\&.c\&.
.SS "int fprintf (\fBFILE\fP *fp, const char *format, \&.\&.\&.)"

.PP
Formatted print to FILE* stream\&. 
.PP
Definition at line 323 of file stdio\&.c\&.
.SS "int fputc (intc, \fBFILE\fP *fp)"
Write a character to the FILE* stream\&. return character written or -1 + errno if character was not written\&. 
.PP
Definition at line 83 of file stdio\&.c\&.
.SS "int fputs (const char *s, \fBFILE\fP *fp)"
Write a characters to the FILE* stream\&. return number of characters written or -1 + errno if characters where not written\&. 
.PP
Definition at line 99 of file stdio\&.c\&.
.SS "int fread (\fBFILE\fP *fp, char *p, size_tlen)"

.PP
Definition at line 365 of file stdio\&.c\&.
.SS "int fwrite (\fBFILE\fP *fp, char *p, size_tlen)"

.PP
Definition at line 360 of file stdio\&.c\&.
.SS "int getchar ()"

.PP
Definition at line 375 of file stdio\&.c\&.
.SS "int printf (const char *format, \&.\&.\&.)"

.PP
Formatted print to FILE* stdout\&. 
.PP
Definition at line 335 of file stdio\&.c\&.
.SS "int putchar (intch)"

.PP
Definition at line 380 of file stdio\&.c\&.
.SS "int sprintf (char *str, const char *format, \&.\&.\&.)"

.PP
Formatted print to FILE* stream\&. 
.PP
Definition at line 312 of file stdio\&.c\&.
.SH "Variable Documentation"
.PP 
.SS "\fBstdio_t\fP* _stderr"

.PP
Definition at line 28 of file stdio\&.c\&.
.SS "\fBstdio_t\fP* _stdin"

.PP
Definition at line 26 of file stdio\&.c\&.
.SS "const \fBstdio_t\fP _stdio_[]"

.SS "\fBstdio_t\fP* _stdout"

.PP
Definition at line 27 of file stdio\&.c\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for CARIBOU RTOS from the source code\&.
