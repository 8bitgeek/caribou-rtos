.TH "include/caribou/kernel/interrupt.h" 3 "Thu Dec 29 2016" "Version 0.9" "CARIBOU RTOS" \" -*- nroff -*-
.ad l
.nh
.SH NAME
include/caribou/kernel/interrupt.h \- 
.SH SYNOPSIS
.br
.PP
\fC#include <caribou/kernel/types\&.h>\fP
.br
\fC#include <chip/chip\&.h>\fP
.br
\fC#include <chip/vectors\&.h>\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBcaribou_wfi\fP()   chip_wfi()"
.br
.ti -1c
.RI "#define \fBcaribou_interrupts_enable\fP()   chip_interrupts_enable()"
.br
.ti -1c
.RI "#define \fBcaribou_interrupts_disable\fP()   chip_interrupts_disable()"
.br
.ti -1c
.RI "#define \fBcaribou_interrupts_enabled\fP()   chip_interrupts_enabled()"
.br
.ti -1c
.RI "#define \fBcaribou_interrupts_set\fP(enable)   chip_interrupts_set(enable)"
.br
.ti -1c
.RI "#define \fBcaribou_interrupt_level\fP()   chip_interrupt_level()"
.br
.ti -1c
.RI "#define \fBcaribou_vector_enabled\fP(vector)   chip_vector_enabled(vector)"
.br
.ti -1c
.RI "#define \fBcaribou_vector_enable\fP(vector)   chip_vector_enable(vector)"
.br
.ti -1c
.RI "#define \fBcaribou_vector_disable\fP(vector)   chip_vector_disable(vector)"
.br
.ti -1c
.RI "#define \fBcaribou_vector_set\fP(vector, state)   chip_vector_set(vector,state)"
.br
.ti -1c
.RI "#define \fBcaribou_vector_pending\fP(vector)   chip_vector_pending(vector)"
.br
.ti -1c
.RI "#define \fBcaribou_vector_pend\fP(vector)   chip_vector_pend(vector)"
.br
.ti -1c
.RI "#define \fBcaribou_vector_unpend\fP(vector)   chip_vector_unpend(vector)"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef void(* \fBcaribou_isr_t\fP )(InterruptVector, void *)"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBcaribou_interrupt_service\fP (InterruptVector vector)"
.br
.RI "\fIUser-land Interrupt Service Routine entry point\&. \fP"
.ti -1c
.RI "int \fBcaribou_vector_installed\fP (InterruptVector vector, \fBcaribou_isr_t\fP isr, void *arg)"
.br
.RI "\fIDetermine if a vector is already installed\&. \fP"
.ti -1c
.RI "int \fBcaribou_vector_install\fP (InterruptVector vector, \fBcaribou_isr_t\fP isr, void *arg)"
.br
.RI "\fIInstall the vector into the isr_map chain\&. \fP"
.ti -1c
.RI "int \fBcaribou_vector_remove\fP (InterruptVector vector, \fBcaribou_isr_t\fP isr)"
.br
.RI "\fIInstall the vector into the isr_map chain\&. \fP"
.ti -1c
.RI "int \fBcaribou_vector_remove_all\fP (void *arg)"
.br
.RI "\fIRemove all vectors associated with arg\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 

.PP
.PP
\fBAuthor:\fP
.RS 4
Mike Sharkey mike@pikeaero.com\&. 
.RE
.PP
\fBCopyright:\fP
.RS 4
© 2005-2013 by Pike Aerospace Research Corporation 
.PP
© 2014-2015 by Mike Sharkey
.RE
.PP
This file is part of CARIBOU RTOS CARIBOU RTOS is free software: you can redistribute it and/or modify it under the terms of the Beerware License Version 43\&. 'THE BEER-WARE LICENSE' (Revision 43): Mike Sharkey mike@pikeaero.com wrote this file\&. As long as you retain this notice you can do whatever you want with this stuff\&. If we meet some day, and you think this stuff is worth it, you can buy me a beer in return ~ Mike Sharkey 
.PP
Definition in file \fBinterrupt\&.h\fP\&.
.SH "Macro Definition Documentation"
.PP 
.SS "#define caribou_interrupt_level()   chip_interrupt_level()"

.PP
Definition at line 34 of file interrupt\&.h\&.
.SS "#define caribou_interrupts_disable()   chip_interrupts_disable()"

.PP
Definition at line 31 of file interrupt\&.h\&.
.SS "#define caribou_interrupts_enable()   chip_interrupts_enable()"

.PP
Definition at line 30 of file interrupt\&.h\&.
.SS "#define caribou_interrupts_enabled()   chip_interrupts_enabled()"

.PP
Definition at line 32 of file interrupt\&.h\&.
.SS "#define caribou_interrupts_set(enable)   chip_interrupts_set(enable)"

.PP
Definition at line 33 of file interrupt\&.h\&.
.SS "#define caribou_vector_disable(vector)   chip_vector_disable(vector)"

.PP
Definition at line 37 of file interrupt\&.h\&.
.SS "#define caribou_vector_enable(vector)   chip_vector_enable(vector)"

.PP
Definition at line 36 of file interrupt\&.h\&.
.SS "#define caribou_vector_enabled(vector)   chip_vector_enabled(vector)"

.PP
Definition at line 35 of file interrupt\&.h\&.
.SS "#define caribou_vector_pend(vector)   chip_vector_pend(vector)"

.PP
Definition at line 40 of file interrupt\&.h\&.
.SS "#define caribou_vector_pending(vector)   chip_vector_pending(vector)"

.PP
Definition at line 39 of file interrupt\&.h\&.
.SS "#define caribou_vector_set(vector, state)   chip_vector_set(vector,state)"

.PP
Definition at line 38 of file interrupt\&.h\&.
.SS "#define caribou_vector_unpend(vector)   chip_vector_unpend(vector)"

.PP
Definition at line 41 of file interrupt\&.h\&.
.SS "#define caribou_wfi()   chip_wfi()"

.PP
Definition at line 29 of file interrupt\&.h\&.
.SH "Typedef Documentation"
.PP 
.SS "typedef void(* caribou_isr_t)(InterruptVector, void *)"

.PP
Definition at line 27 of file interrupt\&.h\&.
.SH "Function Documentation"
.PP 
.SS "void caribou_interrupt_service (InterruptVectorvector)"

.PP
User-land Interrupt Service Routine entry point\&. 
.SS "int caribou_vector_install (InterruptVectorvector, \fBcaribou_isr_t\fPisr, void *arg)"

.PP
Install the vector into the isr_map chain\&. 
.PP
\fBParameters:\fP
.RS 4
\fIvector\fP The device specific interrupt vector number\&. 
.br
\fIisr\fP A pointer to the interrupt service routing for the vector\&. 
.br
\fIarg\fP An optional argument to pass to the interrupt handler\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The vector number or < 0 on failure\&. 
.RE
.PP

.PP
Definition at line 82 of file interrupt\&.c\&.
.SS "int caribou_vector_installed (InterruptVectorvector, \fBcaribou_isr_t\fPisr, void *arg)"

.PP
Determine if a vector is already installed\&. 
.PP
\fBParameters:\fP
.RS 4
\fIvector\fP The device specific interrupt vector number\&. 
.br
\fIisr\fP A pointer to the interrupt service routing for the vector\&. 
.br
\fIarg\fP An optional argument to pass to the interrupt handler\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
non-zero if vector is installed\&. 
.RE
.PP

.PP
Definition at line 54 of file interrupt\&.c\&.
.SS "int caribou_vector_remove (InterruptVectorvector, \fBcaribou_isr_t\fPisr)"

.PP
Install the vector into the isr_map chain\&. 
.PP
\fBParameters:\fP
.RS 4
\fIvector\fP The device specific interrupt vector number\&. 
.br
\fIisr\fP A pointer to the interrupt service routing for the vector\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The vector number or < 0 on failure\&. 
.RE
.PP

.PP
Definition at line 119 of file interrupt\&.c\&.
.SS "int caribou_vector_remove_all (void *arg)"

.PP
Remove all vectors associated with arg\&. 
.PP
\fBParameters:\fP
.RS 4
\fIvector\fP The device specific interrupt vector number\&. 
.br
\fIarg\fP A pointer to the arg 
.RE
.PP
\fBReturns:\fP
.RS 4
The vector number or < 0 on failure\&. 
.RE
.PP

.PP
Definition at line 152 of file interrupt\&.c\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for CARIBOU RTOS from the source code\&.
