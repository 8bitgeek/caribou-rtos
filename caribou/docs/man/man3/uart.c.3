.TH "src/dev/uart.c" 3 "Thu Dec 29 2016" "Version 0.9" "CARIBOU RTOS" \" -*- nroff -*-
.ad l
.nh
.SH NAME
src/dev/uart.c \- 
.SH SYNOPSIS
.br
.PP
\fC#include <caribou/kernel/thread\&.h>\fP
.br
\fC#include <caribou/lib/stdio\&.h>\fP
.br
\fC#include <caribou/lib/string\&.h>\fP
.br
\fC#include <caribou/lib/errno\&.h>\fP
.br
\fC#include <caribou/lib/heap\&.h>\fP
.br
\fC#include <caribou/dev/uart\&.h>\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBCARIBOU_UART_RX_BYTEQUEUE_SZ\fP   128"
.br
.ti -1c
.RI "#define \fBCARIBOU_UART_TX_BYTEQUEUE_SZ\fP   32"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBCARIBOU_MUTEX_DECL\fP (uart_mutex)"
.br
.ti -1c
.RI "void ** \fBcaribou_device_of\fP (int fd)"
.br
.RI "\fIFIXME - gateway toward generalized device type\&.\&.\&. \fP"
.ti -1c
.RI "int \fBcaribou_uart_open\fP (int ndev, \fBcaribou_uart_config_t\fP *config)"
.br
.RI "\fIOpen a UART device for subsequent use\&. \fP"
.ti -1c
.RI "int \fBcaribou_uart_close\fP (int fd)"
.br
.RI "\fIClose a previously opened UART\&. \fP"
.ti -1c
.RI "void \fBcaribou_uart_init_config\fP (\fBcaribou_uart_config_t\fP *config)"
.br
.RI "\fIInitialize the config record to contain sane values\&. \fP"
.ti -1c
.RI "int \fBcaribou_uart_set_config\fP (int fd, \fBcaribou_uart_config_t\fP *config)"
.br
.RI "\fISet the UART configuration\&. \fP"
.ti -1c
.RI "int \fBcaribou_uart_queue_tx_sz\fP ()"
.br
.ti -1c
.RI "int \fBcaribou_uart_queue_rx_sz\fP ()"
.br
.ti -1c
.RI "\fBcaribou_bytequeue_t\fP * \fBcaribou_uart_rx_queue\fP (int fd)"
.br
.ti -1c
.RI "\fBcaribou_bytequeue_t\fP * \fBcaribou_uart_tx_queue\fP (int fd)"
.br
.ti -1c
.RI "int \fBcaribou_uart_int_enable\fP (int fd)"
.br
.RI "\fIEnable UART interrupts\&. \fP"
.ti -1c
.RI "int \fBcaribou_uart_int_disable\fP (int fd)"
.br
.RI "\fIDisable UART interrupts\&. \fP"
.ti -1c
.RI "int \fBcaribou_uart_int_enabled\fP (int fd)"
.br
.RI "\fIDetermine if the UART interrupts are enabled\&. \fP"
.ti -1c
.RI "int \fBcaribou_uart_int_set\fP (int fd, int state)"
.br
.RI "\fISet the UART interrupt state\&. \fP"
.ti -1c
.RI "int \fBcaribou_uart_tx_data\fP (int fd, int ch)"
.br
.RI "\fIPlace a byte into the UART transmit buffer\&. \fP"
.ti -1c
.RI "int \fBcaribou_uart_rx_data\fP (int fd)"
.br
.RI "\fIRetrieve a byte from the UART holding register\&. \fP"
.ti -1c
.RI "\fBbool\fP \fBcaribou_uart_tx_busy\fP (int fd)"
.br
.RI "\fIDetermine of the UART transmitter is busy\&. \fP"
.ti -1c
.RI "\fBbool\fP \fBcaribou_uart_tx_ready\fP (int fd)"
.br
.RI "\fIDetermine of the UART transmitter is ready to accept a byte\&. \fP"
.ti -1c
.RI "\fBbool\fP \fBcaribou_uart_rx_ready\fP (int fd)"
.br
.RI "\fIDetermine of receiver has data ready\&. \fP"
.ti -1c
.RI "void \fBcaribou_uart_enable\fP (int fd)"
.br
.ti -1c
.RI "void \fBcaribou_uart_disable\fP (int fd)"
.br
.ti -1c
.RI "int \fBcaribou_uart_private_readfn\fP (\fBstdio_t\fP *io, void *data, int count)"
.br
.RI "\fIFIXME make really private declarations\&. \fP"
.ti -1c
.RI "int \fBcaribou_uart_private_writefn\fP (\fBstdio_t\fP *io, void *data, int count)"
.br
.RI "\fIDevice Driver write-data function\&. \fP"
.ti -1c
.RI "int \fBcaribou_uart_private_flush\fP (\fBstdio_t\fP *io)"
.br
.RI "\fIReturn the device state\&. \fP"
.ti -1c
.RI "int \fBcaribou_uart_private_readqueuefn\fP (\fBstdio_t\fP *io)"
.br
.RI "\fIDevice Driver read-data available function\&. \fP"
.ti -1c
.RI "int \fBcaribou_uart_private_writequeuefn\fP (\fBstdio_t\fP *io)"
.br
.RI "\fIDevice Driver write-data pending\&. \fP"
.ti -1c
.RI "int \fBcaribou_uart_private_statefn\fP (\fBstdio_t\fP *io)"
.br
.RI "\fIReturn the device state\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 

.PP
.PP
\fBAuthor:\fP
.RS 4
Mike Sharkey mike@pikeaero.com\&. 
.RE
.PP
\fBCopyright:\fP
.RS 4
© 2005-2013 by Pike Aerospace Research Corporation 
.PP
© 2014-2015 by Mike Sharkey
.RE
.PP
This file is part of CARIBOU RTOS CARIBOU RTOS is free software: you can redistribute it and/or modify it under the terms of the Beerware License Version 43\&. 'THE BEER-WARE LICENSE' (Revision 43): Mike Sharkey mike@pikeaero.com wrote this file\&. As long as you retain this notice you can do whatever you want with this stuff\&. If we meet some day, and you think this stuff is worth it, you can buy me a beer in return ~ Mike Sharkey 
.PP
Definition in file \fBuart\&.c\fP\&.
.SH "Macro Definition Documentation"
.PP 
.SS "#define CARIBOU_UART_RX_BYTEQUEUE_SZ   128"

.PP
Definition at line 23 of file uart\&.c\&.
.SS "#define CARIBOU_UART_TX_BYTEQUEUE_SZ   32"

.PP
Definition at line 26 of file uart\&.c\&.
.SH "Function Documentation"
.PP 
.SS "void** caribou_device_of (intfd)"

.PP
FIXME - gateway toward generalized device type\&.\&.\&. Flush the I/O queues\&. 
.PP
Definition at line 32 of file uart\&.c\&.
.SS "CARIBOU_MUTEX_DECL (uart_mutex)"

.SS "int caribou_uart_close (intfd)"

.PP
Close a previously opened UART\&. 
.PP
\fBParameters:\fP
.RS 4
\fIfd\fP The opened UART file descriptor\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
< 0 on error\&. 
.RE
.PP

.PP
Definition at line 96 of file uart\&.c\&.
.SS "void caribou_uart_disable (intfd)"

.PP
Definition at line 257 of file uart\&.c\&.
.SS "void caribou_uart_enable (intfd)"

.PP
Definition at line 252 of file uart\&.c\&.
.SS "void caribou_uart_init_config (\fBcaribou_uart_config_t\fP *config)"

.PP
Initialize the config record to contain sane values\&. 
.PP
Definition at line 117 of file uart\&.c\&.
.SS "int caribou_uart_int_disable (intfd)"

.PP
Disable UART interrupts\&. 
.PP
\fBParameters:\fP
.RS 4
\fIfd\fP The open UART file descriptor\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The previous interrupt state\&. 
.RE
.PP

.PP
Definition at line 183 of file uart\&.c\&.
.SS "int caribou_uart_int_enable (intfd)"

.PP
Enable UART interrupts\&. 
.PP
\fBParameters:\fP
.RS 4
\fIfd\fP The open UART file descriptor\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The previous interrupt state\&. 
.RE
.PP

.PP
Definition at line 172 of file uart\&.c\&.
.SS "int caribou_uart_int_enabled (intfd)"

.PP
Determine if the UART interrupts are enabled\&. 
.PP
\fBParameters:\fP
.RS 4
\fIfd\fP The open UART file descriptor\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The current interrupt state\&. 
.RE
.PP

.PP
Definition at line 194 of file uart\&.c\&.
.SS "int caribou_uart_int_set (intfd, intstate)"

.PP
Set the UART interrupt state\&. 
.PP
\fBParameters:\fP
.RS 4
\fIfd\fP The UART file descriptor\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
void 
.RE
.PP

.PP
Definition at line 205 of file uart\&.c\&.
.SS "int caribou_uart_open (intndev, \fBcaribou_uart_config_t\fP *config)"

.PP
Open a UART device for subsequent use\&. 
.PP
\fBParameters:\fP
.RS 4
\fIdevicenum\fP Specifies the device number to use\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The file descriptor or < 0 on error\&. 
.RE
.PP

.PP
Definition at line 44 of file uart\&.c\&.
.SS "int caribou_uart_private_flush (\fBstdio_t\fP *io)"

.PP
Return the device state\&. 
.PP
Definition at line 307 of file uart\&.c\&.
.SS "int caribou_uart_private_readfn (\fBstdio_t\fP *io, void *data, intcount)"

.PP
FIXME make really private declarations\&. Device Driver read-data function\&. 
.PP
\fBReturns:\fP
.RS 4
number of bytes read, or < 0 + errno 
.RE
.PP

.PP
Definition at line 264 of file uart\&.c\&.
.SS "int caribou_uart_private_readqueuefn (\fBstdio_t\fP *io)"

.PP
Device Driver read-data available function\&. Device Driver write-data function\&. 
.PP
Definition at line 323 of file uart\&.c\&.
.SS "int caribou_uart_private_statefn (\fBstdio_t\fP *io)"

.PP
Return the device state\&. Device Driver write-data pending\&. 
.PP
Definition at line 335 of file uart\&.c\&.
.SS "int caribou_uart_private_writefn (\fBstdio_t\fP *io, void *data, intcount)"

.PP
Device Driver write-data function\&. Device Driver read-data function\&. 
.PP
Definition at line 285 of file uart\&.c\&.
.SS "int caribou_uart_private_writequeuefn (\fBstdio_t\fP *io)"

.PP
Device Driver write-data pending\&. Device Driver read-data available function\&. 
.PP
Definition at line 329 of file uart\&.c\&.
.SS "int caribou_uart_queue_rx_sz ()"

.PP
\fBReturns:\fP
.RS 4
The standard receiver queue size in bytes\&. 
.RE
.PP

.PP
Definition at line 152 of file uart\&.c\&.
.SS "int caribou_uart_queue_tx_sz ()"

.PP
\fBReturns:\fP
.RS 4
The standard transmitter queue size in bytes\&. 
.RE
.PP

.PP
Definition at line 144 of file uart\&.c\&.
.SS "int caribou_uart_rx_data (intfd)"

.PP
Retrieve a byte from the UART holding register\&. 
.PP
Definition at line 223 of file uart\&.c\&.
.SS "\fBcaribou_bytequeue_t\fP* caribou_uart_rx_queue (intfd)"

.PP
Definition at line 157 of file uart\&.c\&.
.SS "\fBbool\fP caribou_uart_rx_ready (intfd)"

.PP
Determine of receiver has data ready\&. 
.PP
Definition at line 247 of file uart\&.c\&.
.SS "int caribou_uart_set_config (intfd, \fBcaribou_uart_config_t\fP *config)"

.PP
Set the UART configuration\&. 
.PP
\fBParameters:\fP
.RS 4
\fIfd\fP The opened UART file descriptor\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
< 0 on error\&. 
.RE
.PP

.PP
Definition at line 135 of file uart\&.c\&.
.SS "\fBbool\fP caribou_uart_tx_busy (intfd)"

.PP
Determine of the UART transmitter is busy\&. 
.PP
Definition at line 231 of file uart\&.c\&.
.SS "int caribou_uart_tx_data (intfd, intch)"

.PP
Place a byte into the UART transmit buffer\&. 
.PP
\fBReturns:\fP
.RS 4
the byte\&., 
.RE
.PP

.PP
Definition at line 215 of file uart\&.c\&.
.SS "\fBcaribou_bytequeue_t\fP* caribou_uart_tx_queue (intfd)"

.PP
Definition at line 162 of file uart\&.c\&.
.SS "\fBbool\fP caribou_uart_tx_ready (intfd)"

.PP
Determine of the UART transmitter is ready to accept a byte\&. 
.PP
Definition at line 239 of file uart\&.c\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for CARIBOU RTOS from the source code\&.
