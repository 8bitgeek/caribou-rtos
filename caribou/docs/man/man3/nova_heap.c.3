.TH "src/lib/nova_heap.c" 3 "Sat Jul 19 2014" "Version 0.9" "CARIBOU RTOS" \" -*- nroff -*-
.ad l
.nh
.SH NAME
src/lib/nova_heap.c \- 
.SH SYNOPSIS
.br
.PP
\fC#include <caribou/lib/heap\&.h>\fP
.br

.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBheap_tag\fP"
.br
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBHEAP_BLOCK_SIZE\fP   16   /* Must be a power of two\&. */"
.br
.ti -1c
.RI "#define \fBADDADR\fP(x, n)   ((void *)((unsigned char *)(x)+(n)))"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef struct \fBheap_tag\fP \fBheap_t\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBnova_heap_init\fP (void *heap_base, void *heap_end)"
.br
.RI "\fIInitialize memory\&. \fP"
.ti -1c
.RI "void * \fBnova_heap_calloc\fP (size_t nmemb, size_t size)"
.br
.ti -1c
.RI "void * \fBnova_heap_malloc\fP (size_t size)"
.br
.ti -1c
.RI "void \fBnova_heap_free\fP (void *addr)"
.br
.ti -1c
.RI "void * \fBnova_heap_realloc\fP (void *p, size_t size)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "static \fBheap_t\fP * \fBheap\fP = \fBNULL\fP"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define ADDADR(x, n)   ((void *)((unsigned char *)(x)+(n)))"

.PP
Definition at line 28 of file nova_heap\&.c\&.
.SS "#define HEAP_BLOCK_SIZE   16   /* Must be a power of two\&. */"

.PP
Definition at line 27 of file nova_heap\&.c\&.
.SH "Typedef Documentation"
.PP 
.SS "typedef struct \fBheap_tag\fP  \fBheap_t\fP"

.SH "Function Documentation"
.PP 
.SS "void* nova_heap_calloc (size_tnmemb, size_tsize)"
The \fBcalloc()\fP function allocates memory for an array of nmemb elements of size bytes each and returns a pointer to the allocated memory\&. The memory is set to zero\&. If nmemb or size is 0, then \fBcalloc()\fP returns either NULL, or a unique pointer value that can later be successfully passed to \fBfree()\fP\&. 
.PP
Definition at line 45 of file nova_heap\&.c\&.
.SS "void nova_heap_free (void *addr)"
\fBfree()\fP frees the memory space pointed to by ptr, which must have been returned by a previous call to \fBmalloc()\fP or \fBrealloc()\fP\&. Otherwise, or if free(ptr) has already been called before, undefined behavior occurs\&. If ptr is NULL, no opera‐ tion is performed\&. 
.PP
Definition at line 116 of file nova_heap\&.c\&.
.SS "void nova_heap_init (void *heap_base, void *heap_end)"

.PP
Initialize memory\&. 
.PP
Definition at line 33 of file nova_heap\&.c\&.
.SS "void* nova_heap_malloc (size_tsize)"
\fBmalloc()\fP allocates size bytes and returns a pointer to the allocated memory\&. The memory is not cleared\&. If size is 0, then \fBmalloc()\fP returns either NULL, or a unique pointer value that can later be successfully passed to \fBfree()\fP\&. 
.PP
Definition at line 55 of file nova_heap\&.c\&.
.SS "void* nova_heap_realloc (void *p, size_tsize)"
\fBrealloc()\fP changes the size of the memory block pointed to by ptr to size bytes\&. The contents will be unchanged to the minimum of the old and new sizes; newly allocated memory will be uninitialized\&. If ptr is NULL, then the call is equivalent to mal‐ loc(size), for all values of size; if size is equal to zero, and ptr is not NULL, then the call is equivalent to free(ptr)\&. Unless ptr is NULL, it must have been returned by an earlier call to \fBmalloc()\fP or \fBrealloc()\fP\&. If the area pointed to was moved, a free(ptr) is done\&. 
.PP
Definition at line 186 of file nova_heap\&.c\&.
.SH "Variable Documentation"
.PP 
.SS "\fBheap_t\fP* heap = \fBNULL\fP\fC [static]\fP"

.PP
Definition at line 25 of file nova_heap\&.c\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for CARIBOU RTOS from the source code\&.
