.TH "src/kernel/caribou.c" 3 "Thu Dec 29 2016" "Version 0.9" "CARIBOU RTOS" \" -*- nroff -*-
.ad l
.nh
.SH NAME
src/kernel/caribou.c \- 
.SH SYNOPSIS
.br
.PP
\fC#include <caribou\&.h>\fP
.br
\fC#include <chip/chip\&.h>\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "const char * \fBcaribou_version\fP ()"
.br
.ti -1c
.RI "void \fB_halt\fP ()"
.br
.ti -1c
.RI "int \fBcaribou_lock_state\fP ()"
.br
.RI "\fITest the state of the CARIBOU scheduler lock\&. \fP"
.ti -1c
.RI "int \fBcaribou_lock\fP ()"
.br
.RI "\fILock the CARIBOU scheduler onto current thread\&. \fP"
.ti -1c
.RI "int \fBcaribou_unlock\fP ()"
.br
.RI "\fIUnlock the CARIBOU scheduler\&. \fP"
.ti -1c
.RI "void \fBcaribou_lock_set\fP (int state)"
.br
.RI "\fISet the CARIBOU scheduler lock state\&. \fP"
.ti -1c
.RI "void \fBcaribou_preempt\fP ()"
.br
.RI "\fIForce scheduler to perform a context switch\&. \fP"
.ti -1c
.RI "\fB__attribute__\fP ((weak))"
.br
.RI "\fIAbort on a hard fault\&. \fP"
.ti -1c
.RI "void \fBcaribou_exec\fP (void)"
.br
.RI "\fIThe CARIBOU main thread loop\&. \fBcaribou_exec()\fP does not return\&. \fP"
.ti -1c
.RI "void \fBcaribou_init_clock\fP ()"
.br
.RI "\fIInitialize the clock such that jiffies start ticking\&. \fP"
.ti -1c
.RI "void \fBcaribou_init\fP (int8_t priority)"
.br
.RI "\fIInitialize the CARIBOU main thread\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 

.PP
.PP
\fBAuthor:\fP
.RS 4
Mike Sharkey mike@pikeaero.com\&. 
.RE
.PP
\fBCopyright:\fP
.RS 4
© 2005-2013 by Pike Aerospace Research Corporation 
.PP
© 2014-2015 by Mike Sharkey
.RE
.PP
This file is part of CARIBOU RTOS CARIBOU RTOS is free software: you can redistribute it and/or modify it under the terms of the Beerware License Version 43\&. 'THE BEER-WARE LICENSE' (Revision 43): Mike Sharkey mike@pikeaero.com wrote this file\&. As long as you retain this notice you can do whatever you want with this stuff\&. If we meet some day, and you think this stuff is worth it, you can buy me a beer in return ~ Mike Sharkey 
.PP
Definition in file \fBcaribou\&.c\fP\&.
.SH "Function Documentation"
.PP 
.SS "__attribute__ ((weak))"

.PP
Abort on a hard fault\&. Main thread idle time processing\&. This weakly liked function gets called during main (caribou) thread idle time\&. There is no guaranteed schedule, however, under normal circumstances, the board_idle() function should be called with a period of one millisecond\&. Normally the function over-ride resides in board\&.c/pp and must utilize 'C' linkage\&.
.PP
.PP
.PP
notify memory free'd
.PP
notify invalid free'd
.PP
notify invalid realloc'd
.PP
notify invalid alloc'd 
.PP
Definition at line 72 of file caribou\&.c\&.
.SS "void _halt ()"

.SS "void caribou_exec (void)"

.PP
The CARIBOU main thread loop\&. \fBcaribou_exec()\fP does not return\&. 
.PP
\fBNote:\fP
.RS 4
If it is desired to run some application code from the main thread, then it is recommended that the application code implement the main_idle() function which is callback from the main thread idle loop, and will be called after each cycle of CARIBOU house keeping\&. 
.RE
.PP
never to return\&. 
.PP
Definition at line 90 of file caribou\&.c\&.
.SS "void caribou_init (int8_tpriority)"

.PP
Initialize the CARIBOU main thread\&. 
.PP
\fBParameters:\fP
.RS 4
\fIpriority\fP The priority to assign to the main thread\&. 
.RE
.PP
\fBNote:\fP
.RS 4
Interrupts are disabled for the duration of this function\&. 
.PP
\fBcaribou_init()\fP must be called before any other CARIBOU threads are created\&. 
.RE
.PP

.PP
Definition at line 115 of file caribou\&.c\&.
.SS "void caribou_init_clock ()"

.PP
Initialize the clock such that jiffies start ticking\&. 
.PP
Definition at line 98 of file caribou\&.c\&.
.SS "int caribou_lock ()"

.PP
Lock the CARIBOU scheduler onto current thread\&. 
.PP
 
.PP
Definition at line 40 of file caribou\&.c\&.
.SS "void caribou_lock_set (intstate)"

.PP
Set the CARIBOU scheduler lock state\&. 
.PP
 
.PP
Definition at line 56 of file caribou\&.c\&.
.SS "int caribou_lock_state ()"

.PP
Test the state of the CARIBOU scheduler lock\&. 
.PP
 
.PP
\fBReturns:\fP
.RS 4
The number of lock state 
.RE
.PP

.PP
Definition at line 32 of file caribou\&.c\&.
.SS "void caribou_preempt ()"

.PP
Force scheduler to perform a context switch\&. 
.PP
 
.PP
Definition at line 64 of file caribou\&.c\&.
.SS "int caribou_unlock ()"

.PP
Unlock the CARIBOU scheduler\&. 
.PP
 
.PP
Definition at line 48 of file caribou\&.c\&.
.SS "const char* caribou_version ()"

.PP
 
.PP
\fBReturns:\fP
.RS 4
The Caribou Version\&. 
.RE
.PP

.PP
Definition at line 21 of file caribou\&.c\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for CARIBOU RTOS from the source code\&.
