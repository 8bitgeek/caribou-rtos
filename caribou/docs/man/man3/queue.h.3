.TH "include/caribou/lib/queue.h" 3 "Sat Jul 19 2014" "Version 0.9" "CARIBOU RTOS" \" -*- nroff -*-
.ad l
.nh
.SH NAME
include/caribou/lib/queue.h \- 
.SH SYNOPSIS
.br
.PP
\fC#include <caribou/kernel/types\&.h>\fP
.br
\fC#include <caribou/lib/mutex\&.h>\fP
.br
\fC#include <caribou/kernel/timer\&.h>\fP
.br

.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fB_caribou_queue_t\fP"
.br
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBCARIBOU_QUEUE\fP(DEPTH, MSGS)   {DEPTH,0,MSGS}"
.br
.RI "\fIA caribou_queue_t structure initializer\&. \fP"
.ti -1c
.RI "#define \fBDECL_CARIBOU_QUEUE\fP(QUEUE, DEPTH)"
.br
.RI "\fIDeclare a queue of a specified depth and allocate the required storage\&. \fP"
.ti -1c
.RI "#define \fBDECL_STATIC_CARIBOU_QUEUE\fP(QUEUE, DEPTH)"
.br
.ti -1c
.RI "#define \fBQUEUE_DEPTH_DYNAMIC\fP   -1"
.br
.ti -1c
.RI "#define \fBcaribou_queue_lock\fP()   \fBcaribou_lib_lock\fP()"
.br
.ti -1c
.RI "#define \fBcaribou_queue_lock_restore\fP(lvl)   \fBcaribou_lib_lock_restore\fP(lvl)"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef void \fBcaribou_queue_msg_t\fP"
.br
.ti -1c
.RI "typedef struct \fB_caribou_queue_t\fP \fBcaribou_queue_t\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBcaribou_queue_t\fP * \fBcaribou_queue_new\fP (int depth)"
.br
.RI "\fIAllocate and initialize a new queue on the stack\&. \fP"
.ti -1c
.RI "void \fBcaribou_queue_delete\fP (\fBcaribou_queue_t\fP *queue)"
.br
.RI "\fIDelete a queue previously created with \fBcaribou_queue_new()\fP\&. \fP"
.ti -1c
.RI "\fBcaribou_queue_t\fP * \fBcaribou_queue_init\fP (\fBcaribou_queue_t\fP *queue, int depth, \fBcaribou_queue_msg_t\fP **msg)"
.br
.RI "\fIinitialize a queue where storage has been pre-allocated\&. \fP"
.ti -1c
.RI "int \fBcaribou_queue_depth\fP (\fBcaribou_queue_t\fP *queue)"
.br
.ti -1c
.RI "int \fBcaribou_queue_count\fP (\fBcaribou_queue_t\fP *queue)"
.br
.ti -1c
.RI "\fBbool\fP \fBcaribou_queue_empty\fP (\fBcaribou_queue_t\fP *queue)"
.br
.RI "\fIDetermin if the queue is empty (count == 0 )\&. \fP"
.ti -1c
.RI "\fBbool\fP \fBcaribou_queue_full\fP (\fBcaribou_queue_t\fP *queue)"
.br
.RI "\fIDetermine if the queue is full, meaning count has reached depth\&. \fP"
.ti -1c
.RI "\fBbool\fP \fBcaribou_queue_post\fP (\fBcaribou_queue_t\fP *queue, \fBcaribou_queue_msg_t\fP *msg, \fBcaribou_tick_t\fP timeout)"
.br
.RI "\fIPost a message to the queue and block while there is no space in the queue\&. \fP"
.ti -1c
.RI "\fBcaribou_queue_msg_t\fP * \fBcaribou_queue_last\fP (\fBcaribou_queue_t\fP *queue)"
.br
.RI "\fIPeek at the last message in the queue\&. \fP"
.ti -1c
.RI "\fBcaribou_queue_msg_t\fP * \fBcaribou_queue_first\fP (\fBcaribou_queue_t\fP *queue)"
.br
.RI "\fIPeek at the last message in the queue\&. \fP"
.ti -1c
.RI "\fBcaribou_queue_msg_t\fP * \fBcaribou_queue_take_last\fP (\fBcaribou_queue_t\fP *queue, \fBcaribou_tick_t\fP timeout)"
.br
.RI "\fIFetch last message from the queue\&. \fP"
.ti -1c
.RI "\fBcaribou_queue_msg_t\fP * \fBcaribou_queue_take_first\fP (\fBcaribou_queue_t\fP *queue, \fBcaribou_tick_t\fP timeout)"
.br
.RI "\fIFetch first message from the queue, or wait\&. \fP"
.ti -1c
.RI "\fBbool\fP \fBcaribou_queue_try_post\fP (\fBcaribou_queue_t\fP *queue, \fBcaribou_queue_msg_t\fP *msg)"
.br
.RI "\fIPost a message to the queue and don't block if there is no space in the queue\&. \fP"
.ti -1c
.RI "\fBcaribou_queue_msg_t\fP * \fBcaribou_queue_try_take_last\fP (\fBcaribou_queue_t\fP *queue)"
.br
.RI "\fIFetch last message from the queue\&. \fP"
.ti -1c
.RI "\fBcaribou_queue_msg_t\fP * \fBcaribou_queue_try_take_first\fP (\fBcaribou_queue_t\fP *queue)"
.br
.RI "\fIFetch first message from the queue\&. \fP"
.ti -1c
.RI "int \fBcaribou_queue_index_of\fP (\fBcaribou_queue_t\fP *queue, \fBcaribou_queue_msg_t\fP *msg)"
.br
.RI "\fIReturn the index of a particular message in the queue\&. \fP"
.ti -1c
.RI "\fBcaribou_queue_msg_t\fP * \fBcaribou_queue_swap\fP (\fBcaribou_queue_t\fP *queue, int a, int b)"
.br
.RI "\fISwap two messages in the queue\&. \fP"
.ti -1c
.RI "\fBcaribou_queue_msg_t\fP * \fBcaribou_queue_rotate\fP (\fBcaribou_queue_t\fP *queue)"
.br
.RI "\fIRotate the messages in the queue, first->last\&. \fP"
.ti -1c
.RI "\fBcaribou_queue_msg_t\fP * \fBcaribou_queue_take_at\fP (\fBcaribou_queue_t\fP *queue, int index, \fBcaribou_tick_t\fP timeout)"
.br
.RI "\fITake a message our of the queue at an index\&. \fP"
.ti -1c
.RI "\fBcaribou_queue_msg_t\fP * \fBcaribou_queue_try_take_at\fP (\fBcaribou_queue_t\fP *queue, int index)"
.br
.RI "\fITake a message our of the queue at an index\&. \fP"
.ti -1c
.RI "\fBcaribou_queue_msg_t\fP * \fBcaribou_queue_at\fP (\fBcaribou_queue_t\fP *queue, int index)"
.br
.RI "\fIFind a message in the queue at an index\&. \fP"
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define CARIBOU_QUEUE(DEPTH, MSGS)   {DEPTH,0,MSGS}"

.PP
A caribou_queue_t structure initializer\&. 
.PP
\fBParameters:\fP
.RS 4
\fIDEPTH\fP The depth of the queue\&. 
.br
\fIMSGS\fP The storage space for messages\&. ( Must be at least DEPTH*sizeof(void*) )\&. 
.RE
.PP

.PP
Definition at line 46 of file queue\&.h\&.
.SS "#define caribou_queue_lock()   \fBcaribou_lib_lock\fP()"

.PP
Definition at line 69 of file queue\&.h\&.
.SS "#define caribou_queue_lock_restore(lvl)   \fBcaribou_lib_lock_restore\fP(lvl)"

.PP
Definition at line 70 of file queue\&.h\&.
.SS "#define DECL_CARIBOU_QUEUE(QUEUE, DEPTH)"
\fBValue:\fP
.PP
.nf
void* QUEUE ## msgs[DEPTH];  \\
		caribou_queue_t QUEUE = CARIBOU_QUEUE(DEPTH,QUEUE ## msgs)
.fi
.PP
Declare a queue of a specified depth and allocate the required storage\&. 
.PP
\fBParameters:\fP
.RS 4
\fIQUEUE\fP The queue to operate on\&. 
.br
\fIDEPTH\fP The depth of the queue in terms of number of message pointers\&. 
.RE
.PP

.PP
Definition at line 53 of file queue\&.h\&.
.SS "#define DECL_STATIC_CARIBOU_QUEUE(QUEUE, DEPTH)"
\fBValue:\fP
.PP
.nf
static void* QUEUE ## msgs[DEPTH];   \
        static caribou_queue_t QUEUE = CARIBOU_QUEUE(DEPTH,QUEUE ## msgs)
.fi
.PP
Definition at line 57 of file queue\&.h\&.
.SS "#define QUEUE_DEPTH_DYNAMIC   -1"

.PP
Definition at line 64 of file queue\&.h\&.
.SH "Typedef Documentation"
.PP 
.SS "typedef void \fBcaribou_queue_msg_t\fP"
Message queues\&. FIXME - caribou_queue_msg_t to linked list item for linked list queues\&. 
.PP
Definition at line 32 of file queue\&.h\&.
.SS "typedef struct \fB_caribou_queue_t\fP  \fBcaribou_queue_t\fP"

.SH "Function Documentation"
.PP 
.SS "\fBcaribou_queue_msg_t\fP* caribou_queue_at (\fBcaribou_queue_t\fP *queue, intindex)"

.PP
Find a message in the queue at an index\&. 
.PP
 
.PP
\fBParameters:\fP
.RS 4
\fIqueue\fP The queue to operate on\&. 
.br
\fIindex\fP The index if the message to take\&. 
.br
\fItimeout\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
The first item in the queue or NULL\&. 
.RE
.PP

.PP
Definition at line 395 of file queue\&.c\&.
.SS "int caribou_queue_count (\fBcaribou_queue_t\fP *queue)"

.PP
  the number of occupied elements of the queue 
.PP
Definition at line 130 of file queue\&.c\&.
.SS "void caribou_queue_delete (\fBcaribou_queue_t\fP *queue)"

.PP
Delete a queue previously created with \fBcaribou_queue_new()\fP\&. 
.PP
 
.PP
\fBParameters:\fP
.RS 4
\fIqueue\fP A pointver to the queue to delete\&. 
.RE
.PP

.PP
Definition at line 65 of file queue\&.c\&.
.SS "int caribou_queue_depth (\fBcaribou_queue_t\fP *queue)"

.PP
 
.PP
\fBParameters:\fP
.RS 4
\fIqueue\fP The queue in question\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The depth of the queue in terms of object capacity\&. 
.RE
.PP

.PP
Definition at line 119 of file queue\&.c\&.
.SS "\fBbool\fP caribou_queue_empty (\fBcaribou_queue_t\fP *queue)"

.PP
Determin if the queue is empty (count == 0 )\&. 
.PP
 
.PP
\fBParameters:\fP
.RS 4
\fIThe\fP queue in question\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
true if the queue is empty\&. 
.RE
.PP

.PP
Definition at line 107 of file queue\&.c\&.
.SS "\fBcaribou_queue_msg_t\fP* caribou_queue_first (\fBcaribou_queue_t\fP *queue)"

.PP
Peek at the last message in the queue\&. 
.PP
 
.PP
\fBParameters:\fP
.RS 4
\fIqueue\fP The queue to operate on\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Return the message pointer or NULL\&. 
.RE
.PP

.PP
Definition at line 176 of file queue\&.c\&.
.SS "\fBbool\fP caribou_queue_full (\fBcaribou_queue_t\fP *queue)"

.PP
Determine if the queue is full, meaning count has reached depth\&. 
.PP
 
.PP
\fBParameters:\fP
.RS 4
\fIqueue\fP The queue in question\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
true if the queue is full\&. 
.RE
.PP

.PP
Definition at line 94 of file queue\&.c\&.
.SS "int caribou_queue_index_of (\fBcaribou_queue_t\fP *queue, \fBcaribou_queue_msg_t\fP *msg)"

.PP
Return the index of a particular message in the queue\&. 
.PP
 
.PP
\fBParameters:\fP
.RS 4
\fIqueue\fP The queue to operate on\&. 
.br
\fImsg\fP A pointer to a message\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Return the message index or -1\&. 
.RE
.PP

.PP
Definition at line 288 of file queue\&.c\&.
.SS "\fBcaribou_queue_t\fP* caribou_queue_init (\fBcaribou_queue_t\fP *queue, intdepth, \fBcaribou_queue_msg_t\fP **msgs)"

.PP
initialize a queue where storage has been pre-allocated\&. 
.PP
 
.PP
\fBParameters:\fP
.RS 4
\fIqueue\fP A pointer to the queue to initialize\&. 
.br
\fIdepth\fP The depth of the queue in terms of number of pointers\&. 
.RE
.PP

.PP
Definition at line 80 of file queue\&.c\&.
.SS "\fBcaribou_queue_msg_t\fP* caribou_queue_last (\fBcaribou_queue_t\fP *queue)"

.PP
Peek at the last message in the queue\&. 
.PP
 
.PP
\fBParameters:\fP
.RS 4
\fIqueue\fP The queue to operate on\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Return the message pointer or NULL\&. 
.RE
.PP

.PP
Definition at line 159 of file queue\&.c\&.
.SS "\fBcaribou_queue_t\fP* caribou_queue_new (intdepth)"

.PP
Allocate and initialize a new queue on the stack\&. 
.PP
 
.PP
\fBParameters:\fP
.RS 4
\fIdepth\fP The depth of the queue expressed in the number of pointers\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
A pointer to the new queue or NULL if allocation failed\&. 
.RE
.PP

.PP
Definition at line 30 of file queue\&.c\&.
.SS "\fBbool\fP caribou_queue_post (\fBcaribou_queue_t\fP *queue, \fBcaribou_queue_msg_t\fP *msg, \fBcaribou_tick_t\fPtimeout)"

.PP
Post a message to the queue and block while there is no space in the queue\&. 
.PP
 
.PP
\fBParameters:\fP
.RS 4
\fIqueue\fP The queue to operate on\&. 
.br
\fImsg\fP A pointer to the message to insert\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
If the message was posted return true\&. 
.RE
.PP

.PP
Definition at line 145 of file queue\&.c\&.
.SS "\fBcaribou_queue_msg_t\fP* caribou_queue_rotate (\fBcaribou_queue_t\fP *queue)"

.PP
Rotate the messages in the queue, first->last\&. 
.PP
 
.PP
\fBParameters:\fP
.RS 4
\fIqueue\fP The queue to operate on\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The first item in the queue or NULL\&. 
.RE
.PP

.PP
Definition at line 331 of file queue\&.c\&.
.SS "\fBcaribou_queue_msg_t\fP* caribou_queue_swap (\fBcaribou_queue_t\fP *queue, inta, intb)"

.PP
Swap two messages in the queue\&. 
.PP
 
.PP
\fBParameters:\fP
.RS 4
\fIqueue\fP The queue to operate on\&. 
.br
\fIa\fP message A 
.br
\fIb\fP message B 
.RE
.PP
\fBReturns:\fP
.RS 4
The first item in the queue or NULL\&. 
.RE
.PP

.PP
Definition at line 311 of file queue\&.c\&.
.SS "\fBcaribou_queue_msg_t\fP* caribou_queue_take_at (\fBcaribou_queue_t\fP *queue, intindex, \fBcaribou_tick_t\fPtimeout)"

.PP
Take a message our of the queue at an index\&. 
.PP
 
.PP
\fBParameters:\fP
.RS 4
\fIqueue\fP The queue to operate on\&. 
.br
\fIindex\fP The index if the message to take\&. 
.br
\fItimeout\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
The first item in the queue or NULL\&. 
.RE
.PP

.PP
Definition at line 357 of file queue\&.c\&.
.SS "\fBcaribou_queue_msg_t\fP* caribou_queue_take_first (\fBcaribou_queue_t\fP *queue, \fBcaribou_tick_t\fPtimeout)"

.PP
Fetch first message from the queue, or wait\&. 
.PP
 
.PP
\fBParameters:\fP
.RS 4
\fIqueue\fP The queue to operate on\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Return the message pointer or NULL\&. 
.RE
.PP

.PP
Definition at line 207 of file queue\&.c\&.
.SS "\fBcaribou_queue_msg_t\fP* caribou_queue_take_last (\fBcaribou_queue_t\fP *queue, \fBcaribou_tick_t\fPtimeout)"

.PP
Fetch last message from the queue\&. 
.PP
 
.PP
\fBParameters:\fP
.RS 4
\fIqueue\fP The queue to operate on\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Return the message pointer or NULL\&. 
.RE
.PP

.PP
Definition at line 193 of file queue\&.c\&.
.SS "\fBbool\fP caribou_queue_try_post (\fBcaribou_queue_t\fP *queue, \fBcaribou_queue_msg_t\fP *msg)"

.PP
Post a message to the queue and don't block if there is no space in the queue\&. 
.PP
 
.PP
\fBParameters:\fP
.RS 4
\fIqueue\fP The queue to operate on\&. 
.br
\fImsg\fP he message to insert\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
true if message was posted 
.RE
.PP

.PP
Definition at line 223 of file queue\&.c\&.
.SS "\fBcaribou_queue_msg_t\fP* caribou_queue_try_take_at (\fBcaribou_queue_t\fP *queue, intindex)"

.PP
Take a message our of the queue at an index\&. 
.PP
 
.PP
\fBParameters:\fP
.RS 4
\fIqueue\fP The queue to operate on\&. 
.br
\fIindex\fP The index if the message to take\&. 
.br
\fItimeout\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
The first item in the queue or NULL\&. 
.RE
.PP

.PP
Definition at line 374 of file queue\&.c\&.
.SS "\fBcaribou_queue_msg_t\fP* caribou_queue_try_take_first (\fBcaribou_queue_t\fP *queue)"

.PP
Fetch first message from the queue\&. 
.PP
 
.PP
\fBParameters:\fP
.RS 4
\fIqueue\fP The queue to operate on\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Return the message pointer or NULL\&. 
.RE
.PP

.PP
Definition at line 268 of file queue\&.c\&.
.SS "\fBcaribou_queue_msg_t\fP* caribou_queue_try_take_last (\fBcaribou_queue_t\fP *queue)"

.PP
Fetch last message from the queue\&. 
.PP
 
.PP
\fBParameters:\fP
.RS 4
\fIqueue\fP The queue to operate on\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Return the message pointer or NULL\&. 
.RE
.PP

.PP
Definition at line 251 of file queue\&.c\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for CARIBOU RTOS from the source code\&.
