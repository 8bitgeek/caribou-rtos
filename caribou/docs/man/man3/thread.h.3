.TH "include/caribou/kernel/thread.h" 3 "Sat Jul 19 2014" "Version 0.9" "CARIBOU RTOS" \" -*- nroff -*-
.ad l
.nh
.SH NAME
include/caribou/kernel/thread.h \- 
.SH SYNOPSIS
.br
.PP
\fC#include <caribou/kernel/types\&.h>\fP
.br
\fC#include <caribou/kernel/timer\&.h>\fP
.br
\fC#include <caribou/lib/errno\&.h>\fP
.br

.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fB_caribou_thread_t\fP"
.br
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBCARIBOU_THREAD_DEF_STKSZ\fP   1024"
.br
.ti -1c
.RI "#define \fBCARIBOU_THREAD_LOWPRIO\fP   0"
.br
.ti -1c
.RI "#define \fBCARIBOU_THREAD_NORMALPRIO\fP   1"
.br
.ti -1c
.RI "#define \fBCARIBOU_THREAD_HIGHPRIO\fP   2"
.br
.ti -1c
.RI "#define \fBCARIBOU_THREAD_DEF_PRIO\fP   \fBCARIBOU_THREAD_LOWPRIO\fP"
.br
.ti -1c
.RI "#define \fBCARIBOU_THREAD_F_SLEEP\fP   0x0001"
.br
.ti -1c
.RI "#define \fBCARIBOU_THREAD_F_YIELD\fP   0x0002"
.br
.ti -1c
.RI "#define \fBCARIBOU_THREAD_F_TERMINATED\fP   0x0004"
.br
.ti -1c
.RI "#define \fBCARIBOU_THREAD_F_IDLE_MASK\fP   (\fBCARIBOU_THREAD_F_YIELD\fP | \fBCARIBOU_THREAD_F_TERMINATED\fP)"
.br
.ti -1c
.RI "#define \fBTHREAD_FAULT_STACK_LOW\fP   0x0001"
.br
.ti -1c
.RI "#define \fBTHREAD_FAULT_STACK_UNDERFLOW\fP   0x0002"
.br
.ti -1c
.RI "#define \fBTHREAD_FAULT_STACK_OVERFLOW\fP   0x0004"
.br
.ti -1c
.RI "#define \fBTHREAD_FAULT_ALLOC_FAILURE\fP   0x0008"
.br
.ti -1c
.RI "#define \fBTHREAD_FAULT_HEAP_CORRUPT\fP   0x0010"
.br
.ti -1c
.RI "#define \fBcaribou_thread_yield_while\fP(e)   while(e) \fBcaribou_thread_yield\fP()"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef struct \fB_caribou_thread_t\fP \fBcaribou_thread_t\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBcaribou_thread_t\fP * \fBcaribou_thread_init\fP (int16_t \fBpriority\fP)"
.br
.RI "\fIInitialize the thread system with priority of main thread, this creates the main 'caribou' thread\&. \fP"
.ti -1c
.RI "void \fBcaribou_thread_fault_set\fP (void *(*fn)(int, void *), void *arg)"
.br
.RI "\fIset the thread fault callback handler \fP"
.ti -1c
.RI "\fBcaribou_thread_t\fP * \fBcaribou_thread_create\fP (const char *name, void(*run)(void *), void(*finish)(void *), void *arg, void *stackaddr, int stack_size, int16_t \fBpriority\fP)"
.br
.ti -1c
.RI "void \fBcaribou_thread_set_priority\fP (\fBcaribou_thread_t\fP *thread, int16_t \fBpriority\fP)"
.br
.RI "\fISet the priority of the current thread\&. \fP"
.ti -1c
.RI "\fBbool\fP \fBcaribou_thread_yield\fP (void)"
.br
.RI "\fIYield to another thread\&. \fP"
.ti -1c
.RI "void \fBcaribou_thread_finish\fP (void)"
.br
.ti -1c
.RI "void \fBcaribou_thread_terminate\fP (\fBcaribou_thread_t\fP *thread)"
.br
.RI "\fIThis is called to terminate another thread\&. \fP"
.ti -1c
.RI "\fBcaribou_thread_t\fP * \fBcaribou_thread_root\fP (void)"
.br
.ti -1c
.RI "\fBcaribou_thread_t\fP * \fBcaribou_thread_current\fP (void)"
.br
.ti -1c
.RI "void * \fBcaribou_thread_current_arg\fP (void)"
.br
.RI "\fIreturn current thread arg \fP"
.ti -1c
.RI "\fBcaribou_thread_t\fP * \fBcaribou_thread_parent\fP (\fBcaribou_thread_t\fP *thread)"
.br
.RI "\fIreturn the parent thread \fP"
.ti -1c
.RI "\fBcaribou_thread_t\fP * \fBcaribou_thread_first\fP (void)"
.br
.ti -1c
.RI "int \fBcaribou_thread_count\fP (void)"
.br
.ti -1c
.RI "void \fBcaribou_thread_schedule\fP (\fBcaribou_thread_t\fP *thread)"
.br
.RI "\fISchedule a thread to run next\&. The specified thread will be queued to run on the next context switch\&. If it is desired to schedule the thread to run immediately, then follow the \fBcaribou_thread_schedule()\fP call with a call to \fBcaribou_thread_yield()\fP\&. \fP"
.ti -1c
.RI "const char * \fBcaribou_thread_set_name\fP (\fBcaribou_thread_t\fP *thread, const char *name)"
.br
.RI "\fISet a pointer to the thread's name\&. \fP"
.ti -1c
.RI "const char * \fBcaribou_thread_name\fP (\fBcaribou_thread_t\fP *thread)"
.br
.RI "\fIreturn the thread name pointer \fP"
.ti -1c
.RI "uint64_t \fBcaribou_thread_runtime\fP (\fBcaribou_thread_t\fP *thread)"
.br
.RI "\fIreturn the thread's runtime in jiffies \fP"
.ti -1c
.RI "uint32_t \fBcaribou_thread_stacksize\fP (\fBcaribou_thread_t\fP *thread)"
.br
.RI "\fIreturn the thread's stack size in bytes\&. \fP"
.ti -1c
.RI "uint32_t \fBcaribou_thread_stackusage\fP (\fBcaribou_thread_t\fP *thread)"
.br
.RI "\fIreturn the task's stack usage in bytes\&. \fP"
.ti -1c
.RI "int16_t \fBcaribou_thread_priority\fP (\fBcaribou_thread_t\fP *thread)"
.br
.ti -1c
.RI "uint16_t \fBcaribou_thread_state\fP (\fBcaribou_thread_t\fP *thread)"
.br
.RI "\fIreturn the task's state \fP"
.ti -1c
.RI "int \fBcaribou_thread_lock\fP (void)"
.br
.RI "\fILock the current thread such that it will not yield CPU time until such time that the thread is unlocked by \fBcaribou_thread_unlock()\fP\&. Needless to say this should generally be used sparingly\&. \fP"
.ti -1c
.RI "int \fBcaribou_thread_unlock\fP (void)"
.br
.RI "\fIUnlock a thread which has been previously been locked with \fBcaribou_thread_lock()\fP \fP"
.ti -1c
.RI "int \fBcaribou_thread_locked\fP (\fBcaribou_thread_t\fP *thread)"
.br
.RI "\fIDetermine of the current thread is locked? \fP"
.ti -1c
.RI "void \fBcaribou_thread_sleep_current\fP (int32_t ticks)"
.br
.ti -1c
.RI "void \fBcaribou_thread_sleep\fP (\fBcaribou_thread_t\fP *thread, int32_t ticks)"
.br
.ti -1c
.RI "void \fBcaribou_thread_wakeup\fP (\fBcaribou_thread_t\fP *thread)"
.br
.ti -1c
.RI "void \fBcaribou_thread_dump\fP ()"
.br
.ti -1c
.RI "void \fBcaribou_thread_wfi\fP ()"
.br
.RI "\fIfor debugging, dump the thread list to stdout \fP"
.ti -1c
.RI "void \fBcaribou_thread_once\fP ()"
.br
.RI "\fIwait for interrupt \fP"
.ti -1c
.RI "void \fBcaribou_thread_exec\fP ()"
.br
.RI "\fImain thread exec loop - used by CARIBOU \fP"
.ti -1c
.RI "int \fBcaribou_timer_idle\fP (\fBcaribou_thread_t\fP *thread)"
.br
.RI "\fImain thread exec loop - used by CARIBOU \fP"
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define CARIBOU_THREAD_DEF_PRIO   \fBCARIBOU_THREAD_LOWPRIO\fP"

.PP
Definition at line 55 of file thread\&.h\&.
.SS "#define CARIBOU_THREAD_DEF_STKSZ   1024"

.PP
Definition at line 51 of file thread\&.h\&.
.SS "#define CARIBOU_THREAD_F_IDLE_MASK   (\fBCARIBOU_THREAD_F_YIELD\fP | \fBCARIBOU_THREAD_F_TERMINATED\fP)"

.PP
Definition at line 61 of file thread\&.h\&.
.SS "#define CARIBOU_THREAD_F_SLEEP   0x0001"

.PP
Definition at line 57 of file thread\&.h\&.
.SS "#define CARIBOU_THREAD_F_TERMINATED   0x0004"

.PP
Definition at line 59 of file thread\&.h\&.
.SS "#define CARIBOU_THREAD_F_YIELD   0x0002"

.PP
Definition at line 58 of file thread\&.h\&.
.SS "#define CARIBOU_THREAD_HIGHPRIO   2"

.PP
Definition at line 54 of file thread\&.h\&.
.SS "#define CARIBOU_THREAD_LOWPRIO   0"

.PP
Definition at line 52 of file thread\&.h\&.
.SS "#define CARIBOU_THREAD_NORMALPRIO   1"

.PP
Definition at line 53 of file thread\&.h\&.
.SS "#define caribou_thread_yield_while(e)   while(e) \fBcaribou_thread_yield\fP()"

.PP
Definition at line 70 of file thread\&.h\&.
.SS "#define THREAD_FAULT_ALLOC_FAILURE   0x0008"

.PP
Definition at line 66 of file thread\&.h\&.
.SS "#define THREAD_FAULT_HEAP_CORRUPT   0x0010"

.PP
Definition at line 67 of file thread\&.h\&.
.SS "#define THREAD_FAULT_STACK_LOW   0x0001"

.PP
Definition at line 63 of file thread\&.h\&.
.SS "#define THREAD_FAULT_STACK_OVERFLOW   0x0004"

.PP
Definition at line 65 of file thread\&.h\&.
.SS "#define THREAD_FAULT_STACK_UNDERFLOW   0x0002"

.PP
Definition at line 64 of file thread\&.h\&.
.SH "Typedef Documentation"
.PP 
.SS "typedef struct \fB_caribou_thread_t\fP  \fBcaribou_thread_t\fP"

.SH "Function Documentation"
.PP 
.SS "int caribou_thread_count (void)"

.SS "\fBcaribou_thread_t\fP* caribou_thread_create (const char *name, void(*)(void *)run, void(*)(void *)finish, void *arg, void *stackaddr, intstack_size, int16_tpriority)"
Create a new instance of a CARIBOU thread\&. 
.PP
\fBParameters:\fP
.RS 4
\fIname\fP The ascii name of the thread\&. This pointer must remain valid for the life span of the thread instance\&. 
.br
\fIrun\fP A Pointer to the entry point function of the thread\&. Note the entry point function must accept a void* pointer even if it is not used\&. 
.br
\fIfinish\fP A function which is called up thread termination\&. 
.br
\fIarg\fP An argument pointer which is passed to the thread entry point function run\&. 
.br
\fIstackaddr\fP A pointer to bottom of the program stack associated with this thread\&. 
.br
\fIstack_size\fP The size of the stack belonging to this thread\&. 
.br
\fIpriority\fP The priority of the thread\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
A pointer to the newly created thread or NULL if something failed\&. 
.RE
.PP

.PP
Definition at line 421 of file thread\&.c\&.
.SS "\fBcaribou_thread_t\fP* caribou_thread_current (void)"

.PP
\fBReturns:\fP
.RS 4
A pointer to the currently running thread structure\&. 
.RE
.PP

.PP
Definition at line 492 of file thread\&.c\&.
.SS "void* caribou_thread_current_arg (void)"

.PP
return current thread arg 
.PP
Definition at line 524 of file thread\&.c\&.
.SS "void caribou_thread_dump ()"

.PP
Definition at line 121 of file thread\&.c\&.
.SS "void caribou_thread_exec ()"

.PP
main thread exec loop - used by CARIBOU main thread exec loop - used by CARIBOU 
.PP
Definition at line 635 of file thread\&.c\&.
.SS "void caribou_thread_fault_set (void *(*)(int, void *)fn, void *arg)"

.PP
set the thread fault callback handler 
.PP
Definition at line 474 of file thread\&.c\&.
.SS "void caribou_thread_finish (void)"

.SS "\fBcaribou_thread_t\fP* caribou_thread_first (void)"

.PP
\fBReturns:\fP
.RS 4
first thread\&. 
.RE
.PP

.PP
Definition at line 518 of file thread\&.c\&.
.SS "\fBcaribou_thread_t\fP* caribou_thread_init (int16_tpriority)"

.PP
Initialize the thread system with priority of main thread, this creates the main 'caribou' thread\&. 
.PP
Definition at line 556 of file thread\&.c\&.
.SS "int caribou_thread_lock (void)"

.PP
Lock the current thread such that it will not yield CPU time until such time that the thread is unlocked by \fBcaribou_thread_unlock()\fP\&. Needless to say this should generally be used sparingly\&. 
.PP
\fBReturns:\fP
.RS 4
The current state of the lock\&. 
.RE
.PP

.PP
Definition at line 236 of file thread\&.c\&.
.SS "int caribou_thread_locked (\fBcaribou_thread_t\fP *thread)"

.PP
Determine of the current thread is locked? 
.PP
\fBReturns:\fP
.RS 4
The current state of the lock\&. 
.RE
.PP

.PP
Definition at line 271 of file thread\&.c\&.
.SS "const char* caribou_thread_name (\fBcaribou_thread_t\fP *thread)"

.PP
return the thread name pointer 
.PP
Definition at line 327 of file thread\&.c\&.
.SS "void caribou_thread_once ()"

.PP
wait for interrupt 
.PP
Definition at line 609 of file thread\&.c\&.
.SS "\fBcaribou_thread_t\fP* caribou_thread_parent (\fBcaribou_thread_t\fP *thread)"

.PP
return the parent thread 
.PP
Definition at line 357 of file thread\&.c\&.
.SS "int16_t caribou_thread_priority (\fBcaribou_thread_t\fP *thread)"

.PP
\fBReturns:\fP
.RS 4
The thread priority of the current thread\&. 
.RE
.PP

.PP
Definition at line 547 of file thread\&.c\&.
.SS "\fBcaribou_thread_t\fP* caribou_thread_root (void)"

.PP
\fBReturns:\fP
.RS 4
a pointer to the root thread, normally the 'caribou' thread\&. 
.RE
.PP

.PP
Definition at line 484 of file thread\&.c\&.
.SS "uint64_t caribou_thread_runtime (\fBcaribou_thread_t\fP *thread)"

.PP
return the thread's runtime in jiffies 
.PP
Definition at line 333 of file thread\&.c\&.
.SS "void caribou_thread_schedule (\fBcaribou_thread_t\fP *thread)"

.PP
Schedule a thread to run next\&. The specified thread will be queued to run on the next context switch\&. If it is desired to schedule the thread to run immediately, then follow the \fBcaribou_thread_schedule()\fP call with a call to \fBcaribou_thread_yield()\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIthread\fP The thread to schedule to run next\&. 
.RE
.PP

.PP
Definition at line 503 of file thread\&.c\&.
.SS "const char* caribou_thread_set_name (\fBcaribou_thread_t\fP *thread, const char *name)"

.PP
Set a pointer to the thread's name\&. 
.PP
Definition at line 320 of file thread\&.c\&.
.SS "void caribou_thread_set_priority (\fBcaribou_thread_t\fP *thread, int16_tprio)"

.PP
Set the priority of the current thread\&. 
.PP
\fBParameters:\fP
.RS 4
\fIthread\fP A pointer to the target thread\&. 
.br
\fIprio\fP The priority to assign to the thread in terms of additional scheduling slots assigned to the thread\&. For instance, 0 means to perform a switch the thread upon the next context switch interrupt, and 1 means to add one additional context cycle to the thread's run-time\&. 
.RE
.PP

.PP
Definition at line 537 of file thread\&.c\&.
.SS "void caribou_thread_sleep (\fBcaribou_thread_t\fP *thread, int32_tticks)"
Sleep another thread for a number of clock ticks\&. 
.PP
\fBParameters:\fP
.RS 4
\fIthread\fP The thread to put to sleep\&. A zero (0) value indicates forever or until woken up the \fBcaribou_thread_wakeup()\fP function\&. 
.br
\fIticks\fP Number of jiffies to sleep for\&. Forever or until woken up if ticks==0\&. 
.RE
.PP

.PP
Definition at line 289 of file thread\&.c\&.
.SS "void caribou_thread_sleep_current (int32_tticks)"
Sleep the current thread for a number of clock ticks\&. 
.PP
\fBParameters:\fP
.RS 4
\fIthread\fP The thread to put to sleep\&. A zero (0) value indicates forever or until woken up the \fBcaribou_thread_wakeup()\fP function\&. 
.br
\fIticks\fP Number of jiffies to sleep for\&. Forever or until woken up if ticks==0\&. 
.RE
.PP

.PP
Definition at line 305 of file thread\&.c\&.
.SS "uint32_t caribou_thread_stacksize (\fBcaribou_thread_t\fP *thread)"

.PP
return the thread's stack size in bytes\&. 
.PP
Definition at line 339 of file thread\&.c\&.
.SS "uint32_t caribou_thread_stackusage (\fBcaribou_thread_t\fP *thread)"

.PP
return the task's stack usage in bytes\&. 
.PP
Definition at line 345 of file thread\&.c\&.
.SS "uint16_t caribou_thread_state (\fBcaribou_thread_t\fP *thread)"

.PP
return the task's state 
.PP
Definition at line 351 of file thread\&.c\&.
.SS "void caribou_thread_terminate (\fBcaribou_thread_t\fP *thread)"

.PP
This is called to terminate another thread\&. 
.PP
Definition at line 380 of file thread\&.c\&.
.SS "int caribou_thread_unlock (void)"

.PP
Unlock a thread which has been previously been locked with \fBcaribou_thread_lock()\fP 
.PP
\fBReturns:\fP
.RS 4
The current state of the lock\&. 
.RE
.PP

.PP
Definition at line 253 of file thread\&.c\&.
.SS "void caribou_thread_wakeup (\fBcaribou_thread_t\fP *thread)"
Wake a thread previously put to sleep with \fBcaribou_thread_sleep()\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIthread\fP The thread to wake up\&. 
.RE
.PP

.PP
Definition at line 312 of file thread\&.c\&.
.SS "void caribou_thread_wfi ()"

.PP
for debugging, dump the thread list to stdout for debugging, dump the thread list to stdout 
.PP
Definition at line 363 of file thread\&.c\&.
.SS "\fBbool\fP caribou_thread_yield (void)"

.PP
Yield to another thread\&. 
.PP
Definition at line 369 of file thread\&.c\&.
.SS "int caribou_timer_idle (\fBcaribou_thread_t\fP *thread)"

.PP
main thread exec loop - used by CARIBOU main thread idle processing 
.PP
\fBReturns:\fP
.RS 4
number of timers expired 
.RE
.PP
expire timers\&.\&.\&. 
.PP
Definition at line 263 of file timer\&.c\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for CARIBOU RTOS from the source code\&.
