.TH "include/caribou/dev/uart.h" 3 "Sat Jul 19 2014" "Version 0.9" "CARIBOU RTOS" \" -*- nroff -*-
.ad l
.nh
.SH NAME
include/caribou/dev/uart.h \- 
.SH SYNOPSIS
.br
.PP
\fC#include <caribou/kernel/types\&.h>\fP
.br
\fC#include <caribou/lib/bytequeue\&.h>\fP
.br
\fC#include <chip/uart\&.h>\fP
.br

.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBcaribou_uart_config_t\fP"
.br
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBCARIBOU_UART_CONFIG_INIT\fP"
.br
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBcaribou_uart_baud_t\fP { \fBCARIBOU_UART_BAUD_RATE_110\fP =110, \fBCARIBOU_UART_BAUD_RATE_300\fP =300, \fBCARIBOU_UART_BAUD_RATE_600\fP =600, \fBCARIBOU_UART_BAUD_RATE_1200\fP =1200, \fBCARIBOU_UART_BAUD_RATE_2400\fP =2400, \fBCARIBOU_UART_BAUD_RATE_4800\fP =4800, \fBCARIBOU_UART_BAUD_RATE_9600\fP =9600, \fBCARIBOU_UART_BAUD_RATE_19200\fP =19200, \fBCARIBOU_UART_BAUD_RATE_28800\fP =28800, \fBCARIBOU_UART_BAUD_RATE_38400\fP =38400, \fBCARIBOU_UART_BAUD_RATE_56000\fP =56000, \fBCARIBOU_UART_BAUD_RATE_57600\fP =57600, \fBCARIBOU_UART_BAUD_RATE_115200\fP =115200, \fBCARIBOU_UART_BAUD_RATE_128000\fP =128000, \fBCARIBOU_UART_BAUD_RATE_153600\fP =153600, \fBCARIBOU_UART_BAUD_RATE_230400\fP =230400, \fBCARIBOU_UART_BAUD_RATE_256000\fP =256000, \fBCARIBOU_UART_BAUD_RATE_460800\fP =460800, \fBCARIBOU_UART_BAUD_RATE_921600\fP =921600, \fBCARIBOU_UART_BAUD_RATE_1792000\fP =1792000, \fBCARIBOU_UART_BAUD_RATE_1843200\fP =1843200, \fBCARIBOU_UART_BAUD_RATE_3584000\fP =3584000, \fBCARIBOU_UART_BAUD_RATE_3686400\fP =3686400, \fBCARIBOU_UART_BAUD_RATE_7168000\fP =7168000, \fBCARIBOU_UART_BAUD_RATE_7372800\fP =7372800, \fBCARIBOU_UART_BAUD_RATE_9000000\fP =9000000, \fBCARIBOU_UART_BAUD_RATE_10500000\fP =10500000 }"
.br
.ti -1c
.RI "enum \fBcaribou_uart_word_t\fP { \fBCARIBOU_UART_WORDSIZE_5\fP =5, \fBCARIBOU_UART_WORDSIZE_6\fP =6, \fBCARIBOU_UART_WORDSIZE_7\fP =7, \fBCARIBOU_UART_WORDSIZE_8\fP =8, \fBCARIBOU_UART_WORDSIZE_9\fP =9 }"
.br
.ti -1c
.RI "enum \fBcaribou_uart_stop_t\fP { \fBCARIBOU_UART_STOPBITS_05\fP, \fBCARIBOU_UART_STOPBITS_1\fP, \fBCARIBOU_UART_STOPBITS_15\fP, \fBCARIBOU_UART_STOPBITS_2\fP }"
.br
.ti -1c
.RI "enum \fBcaribou_uart_parity_t\fP { \fBCARIBOU_UART_PARITY_NONE\fP, \fBCARIBOU_UART_PARITY_EVEN\fP, \fBCARIBOU_UART_PARITY_ODD\fP }"
.br
.ti -1c
.RI "enum \fBcaribou_uart_flow_t\fP { \fBCARIBOU_UART_FLOW_NONE\fP =0, \fBCARIBOU_UART_FLOW_RTS\fP =0x01, \fBCARIBOU_UART_FLOW_CTS\fP =0x02, \fBCARIBOU_UART_FLOW_RTS_CTS\fP =0x03 }"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "int \fBcaribou_uart_open\fP (int devicenum, \fBcaribou_uart_config_t\fP *config)"
.br
.RI "\fIOpen a UART device for subsequent use\&. \fP"
.ti -1c
.RI "void \fBcaribou_uart_init_config\fP (\fBcaribou_uart_config_t\fP *config)"
.br
.RI "\fIInitialize the config record to contain sane values\&. \fP"
.ti -1c
.RI "int \fBcaribou_uart_set_config\fP (int fd, \fBcaribou_uart_config_t\fP *config)"
.br
.RI "\fISet the UART configuration\&. \fP"
.ti -1c
.RI "int \fBcaribou_uart_close\fP (int fd)"
.br
.RI "\fIClose a previously opened UART\&. \fP"
.ti -1c
.RI "int \fBcaribou_uart_int_enable\fP (int fd)"
.br
.RI "\fIEnable UART interrupts\&. \fP"
.ti -1c
.RI "int \fBcaribou_uart_int_disable\fP (int fd)"
.br
.RI "\fIDisable UART interrupts\&. \fP"
.ti -1c
.RI "int \fBcaribou_uart_int_enabled\fP (int fd)"
.br
.RI "\fIDetermine if the UART interrupts are enabled\&. \fP"
.ti -1c
.RI "int \fBcaribou_uart_int_set\fP (int fd, int state)"
.br
.RI "\fISet the UART interrupt state\&. \fP"
.ti -1c
.RI "\fBcaribou_bytequeue_t\fP * \fBcaribou_uart_rx_queue\fP (int fd)"
.br
.ti -1c
.RI "\fBcaribou_bytequeue_t\fP * \fBcaribou_uart_tx_queue\fP (int fd)"
.br
.ti -1c
.RI "void \fBcaribou_uart_enable\fP (int fd)"
.br
.ti -1c
.RI "void \fBcaribou_uart_disable\fP (int fd)"
.br
.ti -1c
.RI "int \fBcaribou_uart_queue_tx_sz\fP ()"
.br
.ti -1c
.RI "int \fBcaribou_uart_queue_rx_sz\fP ()"
.br
.ti -1c
.RI "int \fBcaribou_uart_tx_data\fP (int fd, int ch)"
.br
.RI "\fIPlace a byte into the UART transmit buffer\&. \fP"
.ti -1c
.RI "int \fBcaribou_uart_rx_data\fP (int fd)"
.br
.RI "\fIRetrieve a byte from the UART holding register\&. \fP"
.ti -1c
.RI "\fBbool\fP \fBcaribou_uart_tx_busy\fP (int fd)"
.br
.RI "\fIDetermine of the UART transmitter is busy\&. \fP"
.ti -1c
.RI "\fBbool\fP \fBcaribou_uart_tx_ready\fP (int fd)"
.br
.RI "\fIDetermine of the UART transmitter is ready to accept a byte\&. \fP"
.ti -1c
.RI "\fBbool\fP \fBcaribou_uart_rx_ready\fP (int fd)"
.br
.RI "\fIDetermine of receiver has data ready\&. \fP"
.ti -1c
.RI "int \fBcaribou_uart_private_readfn\fP (\fBstdio_t\fP *io, void *data, int count)"
.br
.RI "\fIFIXME make really private declarations\&. \fP"
.ti -1c
.RI "int \fBcaribou_uart_private_writefn\fP (\fBstdio_t\fP *io, void *data, int count)"
.br
.RI "\fIDevice Driver read-data function\&. \fP"
.ti -1c
.RI "int \fBcaribou_uart_private_readqueuefn\fP (\fBstdio_t\fP *io)"
.br
.RI "\fIDevice Driver write-data function\&. \fP"
.ti -1c
.RI "int \fBcaribou_uart_private_writequeuefn\fP (\fBstdio_t\fP *io)"
.br
.RI "\fIDevice Driver read-data available function\&. \fP"
.ti -1c
.RI "int \fBcaribou_uart_private_statefn\fP (\fBstdio_t\fP *io)"
.br
.RI "\fIDevice Driver write-data pending\&. \fP"
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define CARIBOU_UART_CONFIG_INIT"
\fBValue:\fP
.PP
.nf
{ CARIBOU_UART_BAUD_RATE_9600, \\
								   CARIBOU_UART_WORDSIZE_8,     \\
								   CARIBOU_UART_STOPBITS_1,     \\
								   CARIBOU_UART_PARITY_NONE,    \\
								   CARIBOU_UART_FLOW_NONE   }
.fi
.PP
Definition at line 114 of file uart\&.h\&.
.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fBcaribou_uart_baud_t\fP"
Defines the UART baud rates\&. Not all baud rates are supported on all platforms\&. The measured baud rate will be dependent upon the hardware clock and UART clock divisor\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fICARIBOU_UART_BAUD_RATE_110 \fP\fP
.TP
\fB\fICARIBOU_UART_BAUD_RATE_300 \fP\fP
110 Baud 
.TP
\fB\fICARIBOU_UART_BAUD_RATE_600 \fP\fP
300 Baud 
.TP
\fB\fICARIBOU_UART_BAUD_RATE_1200 \fP\fP
600 Baud 
.TP
\fB\fICARIBOU_UART_BAUD_RATE_2400 \fP\fP
1200 Baud 
.TP
\fB\fICARIBOU_UART_BAUD_RATE_4800 \fP\fP
2400 Baud 
.TP
\fB\fICARIBOU_UART_BAUD_RATE_9600 \fP\fP
4800 Baud 
.TP
\fB\fICARIBOU_UART_BAUD_RATE_19200 \fP\fP
9600 Baud 
.TP
\fB\fICARIBOU_UART_BAUD_RATE_28800 \fP\fP
19200 Baud 
.TP
\fB\fICARIBOU_UART_BAUD_RATE_38400 \fP\fP
28800 Baud 
.TP
\fB\fICARIBOU_UART_BAUD_RATE_56000 \fP\fP
38400 Baud 
.TP
\fB\fICARIBOU_UART_BAUD_RATE_57600 \fP\fP
56000 Baud 
.TP
\fB\fICARIBOU_UART_BAUD_RATE_115200 \fP\fP
57600 Baud 
.TP
\fB\fICARIBOU_UART_BAUD_RATE_128000 \fP\fP
115200 Baud 
.TP
\fB\fICARIBOU_UART_BAUD_RATE_153600 \fP\fP
128000 Baud 
.TP
\fB\fICARIBOU_UART_BAUD_RATE_230400 \fP\fP
153600 Baud 
.TP
\fB\fICARIBOU_UART_BAUD_RATE_256000 \fP\fP
230400 Baud 
.TP
\fB\fICARIBOU_UART_BAUD_RATE_460800 \fP\fP
256000 Baud 
.TP
\fB\fICARIBOU_UART_BAUD_RATE_921600 \fP\fP
460800 Baud 
.TP
\fB\fICARIBOU_UART_BAUD_RATE_1792000 \fP\fP
921600 Baud 
.TP
\fB\fICARIBOU_UART_BAUD_RATE_1843200 \fP\fP
1792000 Baud 
.TP
\fB\fICARIBOU_UART_BAUD_RATE_3584000 \fP\fP
1843200 Baud 
.TP
\fB\fICARIBOU_UART_BAUD_RATE_3686400 \fP\fP
3584000 Baud 
.TP
\fB\fICARIBOU_UART_BAUD_RATE_7168000 \fP\fP
3686400 Baud 
.TP
\fB\fICARIBOU_UART_BAUD_RATE_7372800 \fP\fP
7168000 Baud 
.TP
\fB\fICARIBOU_UART_BAUD_RATE_9000000 \fP\fP
7372800 Baud 
.TP
\fB\fICARIBOU_UART_BAUD_RATE_10500000 \fP\fP
9000000 Baud 
.PP
Definition at line 37 of file uart\&.h\&.
.SS "enum \fBcaribou_uart_flow_t\fP"
Defines the UART flow control type 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fICARIBOU_UART_FLOW_NONE \fP\fP
.TP
\fB\fICARIBOU_UART_FLOW_RTS \fP\fP
.TP
\fB\fICARIBOU_UART_FLOW_CTS \fP\fP
.TP
\fB\fICARIBOU_UART_FLOW_RTS_CTS \fP\fP
.PP
Definition at line 97 of file uart\&.h\&.
.SS "enum \fBcaribou_uart_parity_t\fP"
Defines the UART word parity bit 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fICARIBOU_UART_PARITY_NONE \fP\fP
.TP
\fB\fICARIBOU_UART_PARITY_EVEN \fP\fP
.TP
\fB\fICARIBOU_UART_PARITY_ODD \fP\fP
.PP
Definition at line 89 of file uart\&.h\&.
.SS "enum \fBcaribou_uart_stop_t\fP"
Defines the UART stop bit size\&. Not all are supported on all platforms\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fICARIBOU_UART_STOPBITS_05 \fP\fP
.TP
\fB\fICARIBOU_UART_STOPBITS_1 \fP\fP
.TP
\fB\fICARIBOU_UART_STOPBITS_15 \fP\fP
.TP
\fB\fICARIBOU_UART_STOPBITS_2 \fP\fP
.PP
Definition at line 80 of file uart\&.h\&.
.SS "enum \fBcaribou_uart_word_t\fP"
Defines the UART word sizes\&. Not all word sizes are supported on all platforms\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fICARIBOU_UART_WORDSIZE_5 \fP\fP
.TP
\fB\fICARIBOU_UART_WORDSIZE_6 \fP\fP
.TP
\fB\fICARIBOU_UART_WORDSIZE_7 \fP\fP
.TP
\fB\fICARIBOU_UART_WORDSIZE_8 \fP\fP
.TP
\fB\fICARIBOU_UART_WORDSIZE_9 \fP\fP
.PP
Definition at line 70 of file uart\&.h\&.
.SH "Function Documentation"
.PP 
.SS "int caribou_uart_close (intfd)"

.PP
Close a previously opened UART\&. 
.PP
\fBParameters:\fP
.RS 4
\fIfd\fP The opened UART file descriptor\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
< 0 on error\&. 
.RE
.PP

.PP
Definition at line 96 of file uart\&.c\&.
.SS "void caribou_uart_disable (intfd)"

.PP
Definition at line 257 of file uart\&.c\&.
.SS "void caribou_uart_enable (intfd)"

.PP
Definition at line 252 of file uart\&.c\&.
.SS "void caribou_uart_init_config (\fBcaribou_uart_config_t\fP *config)"

.PP
Initialize the config record to contain sane values\&. 
.PP
Definition at line 117 of file uart\&.c\&.
.SS "int caribou_uart_int_disable (intfd)"

.PP
Disable UART interrupts\&. 
.PP
\fBParameters:\fP
.RS 4
\fIfd\fP The open UART file descriptor\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The previous interrupt state\&. 
.RE
.PP

.PP
Definition at line 183 of file uart\&.c\&.
.SS "int caribou_uart_int_enable (intfd)"

.PP
Enable UART interrupts\&. 
.PP
\fBParameters:\fP
.RS 4
\fIfd\fP The open UART file descriptor\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The previous interrupt state\&. 
.RE
.PP

.PP
Definition at line 172 of file uart\&.c\&.
.SS "int caribou_uart_int_enabled (intfd)"

.PP
Determine if the UART interrupts are enabled\&. 
.PP
\fBParameters:\fP
.RS 4
\fIfd\fP The open UART file descriptor\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The current interrupt state\&. 
.RE
.PP

.PP
Definition at line 194 of file uart\&.c\&.
.SS "int caribou_uart_int_set (intfd, intstate)"

.PP
Set the UART interrupt state\&. 
.PP
\fBParameters:\fP
.RS 4
\fIfd\fP The UART file descriptor\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
void 
.RE
.PP

.PP
Definition at line 205 of file uart\&.c\&.
.SS "int caribou_uart_open (intndev, \fBcaribou_uart_config_t\fP *config)"

.PP
Open a UART device for subsequent use\&. 
.PP
\fBParameters:\fP
.RS 4
\fIdevicenum\fP Specifies the device number to use\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The file descriptor or < 0 on error\&. 
.RE
.PP

.PP
Definition at line 44 of file uart\&.c\&.
.SS "int caribou_uart_private_readfn (\fBstdio_t\fP *io, void *data, intcount)"

.PP
FIXME make really private declarations\&. Device Driver read-data function\&. 
.PP
\fBReturns:\fP
.RS 4
number of bytes read, or < 0 + errno 
.RE
.PP

.PP
Definition at line 264 of file uart\&.c\&.
.SS "int caribou_uart_private_readqueuefn (\fBstdio_t\fP *io)"

.PP
Device Driver write-data function\&. Device Driver write-data function\&. 
.PP
Definition at line 308 of file uart\&.c\&.
.SS "int caribou_uart_private_statefn (\fBstdio_t\fP *io)"

.PP
Device Driver write-data pending\&. Device Driver write-data pending\&. 
.PP
Definition at line 320 of file uart\&.c\&.
.SS "int caribou_uart_private_writefn (\fBstdio_t\fP *io, void *data, intcount)"

.PP
Device Driver read-data function\&. Device Driver read-data function\&. 
.PP
Definition at line 285 of file uart\&.c\&.
.SS "int caribou_uart_private_writequeuefn (\fBstdio_t\fP *io)"

.PP
Device Driver read-data available function\&. Device Driver read-data available function\&. 
.PP
Definition at line 314 of file uart\&.c\&.
.SS "int caribou_uart_queue_rx_sz ()"

.PP
\fBReturns:\fP
.RS 4
The standard receiver queue size in bytes\&. 
.RE
.PP

.PP
Definition at line 152 of file uart\&.c\&.
.SS "int caribou_uart_queue_tx_sz ()"

.PP
\fBReturns:\fP
.RS 4
The standard transmitter queue size in bytes\&. 
.RE
.PP

.PP
Definition at line 144 of file uart\&.c\&.
.SS "int caribou_uart_rx_data (intfd)"

.PP
Retrieve a byte from the UART holding register\&. 
.PP
Definition at line 223 of file uart\&.c\&.
.SS "\fBcaribou_bytequeue_t\fP* caribou_uart_rx_queue (intfd)"

.PP
Definition at line 157 of file uart\&.c\&.
.SS "\fBbool\fP caribou_uart_rx_ready (intfd)"

.PP
Determine of receiver has data ready\&. 
.PP
Definition at line 247 of file uart\&.c\&.
.SS "int caribou_uart_set_config (intfd, \fBcaribou_uart_config_t\fP *config)"

.PP
Set the UART configuration\&. 
.PP
\fBParameters:\fP
.RS 4
\fIfd\fP The opened UART file descriptor\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
< 0 on error\&. 
.RE
.PP

.PP
Definition at line 135 of file uart\&.c\&.
.SS "\fBbool\fP caribou_uart_tx_busy (intfd)"

.PP
Determine of the UART transmitter is busy\&. 
.PP
Definition at line 231 of file uart\&.c\&.
.SS "int caribou_uart_tx_data (intfd, intch)"

.PP
Place a byte into the UART transmit buffer\&. 
.PP
\fBReturns:\fP
.RS 4
the byte\&., 
.RE
.PP

.PP
Definition at line 215 of file uart\&.c\&.
.SS "\fBcaribou_bytequeue_t\fP* caribou_uart_tx_queue (intfd)"

.PP
Definition at line 162 of file uart\&.c\&.
.SS "\fBbool\fP caribou_uart_tx_ready (intfd)"

.PP
Determine of the UART transmitter is ready to accept a byte\&. 
.PP
Definition at line 239 of file uart\&.c\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for CARIBOU RTOS from the source code\&.
