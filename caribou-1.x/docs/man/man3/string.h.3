.TH "include/caribou/lib/string.h" 3 "Sat Jul 19 2014" "Version 0.9" "CARIBOU RTOS" \" -*- nroff -*-
.ad l
.nh
.SH NAME
include/caribou/lib/string.h \- 
.SH SYNOPSIS
.br
.PP
\fC#include <caribou/kernel/types\&.h>\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBtolower\fP(c)   ( ( c>='A' && c<='Z' ) ? (c+0x20) : c )"
.br
.ti -1c
.RI "#define \fBtoupper\fP(c)   ( ( c>='a' && c<='z' ) ? (c-0x20) : c )"
.br
.ti -1c
.RI "#define \fBisnum\fP(c)   ( c>='0' && c<='9' )"
.br
.ti -1c
.RI "#define \fBishex\fP(c)   \fBisnum\fP(c) || ( \fBtoupper\fP(c)>='A' && \fBtoupper\fP(c)<='F' )"
.br
.ti -1c
.RI "#define \fBhex\fP(c)   ( c<0xa ? c+'0' : (c-0xa)+'A' )"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void * \fBmemcpy\fP (void *dest, const void *src, register size_t n)"
.br
.RI "\fIThe \fBmemcpy()\fP function copies n bytes from memory area src to memory area dest\&. The memory areas should not overlap\&. \fP"
.ti -1c
.RI "void * \fBmemmove\fP (void *dest, const void *src, register size_t n)"
.br
.RI "\fIThe \fBmemmove()\fP method copies n bytes from memory area src to memory area dest\&. The memory areas may overlap\&. \fP"
.ti -1c
.RI "void * \fBmemset\fP (void *dest, register int c, register size_t n)"
.br
.RI "\fIThe \fBmemset()\fP function fills the first n bytes of the memory area pointed to by dest with the constant byte c\&. \fP"
.ti -1c
.RI "int \fBmemcmp\fP (const void *s1, const void *s2, size_t n)"
.br
.RI "\fIThe \fBmemcmp()\fP function compares the first n bytes of the memory areas s1 and s2\&. It returns an integer less than, equal to, or greater than zero if s1 is found, respectively, to be less than, to match, or be greater than s2\&. \fP"
.ti -1c
.RI "char * \fBstrcpy\fP (register char *dest, register const char *src)"
.br
.ti -1c
.RI "char * \fBstrncpy\fP (register char *dest, register const char *src, size_t len)"
.br
.ti -1c
.RI "int \fBstrcmp\fP (register const char *s1, register const char *s2)"
.br
.RI "\fIThe \fBstrcmp()\fP function compares the two strings s1 and s2\&. \fP"
.ti -1c
.RI "int \fBstrcasecmp\fP (register const char *s1, register const char *s2)"
.br
.RI "\fIThe \fBstrcasecmp()\fP function performs case insensitive compare the two strings s1 and s2\&. \fP"
.ti -1c
.RI "int \fBstrncmp\fP (register const char *s1, register const char *s2, size_t n)"
.br
.RI "\fIThe \fBstrcmp()\fP function compares the two strings s1 and s2\&. \fP"
.ti -1c
.RI "int \fBstrncasecmp\fP (register const char *s1, register const char *s2, size_t n)"
.br
.RI "\fIThe \fBstrcmp()\fP function compares the two strings s1 and s2\&. \fP"
.ti -1c
.RI "size_t \fBstrlen\fP (const char *s)"
.br
.RI "\fIThe \fBstrlen()\fP function calculates the length of the string s, not including the terminating '\\0' character\&. \fP"
.ti -1c
.RI "char * \fBstrchr\fP (const char *s, int c)"
.br
.ti -1c
.RI "char * \fBstrcat\fP (char *dest, const char *src)"
.br
.RI "\fIThe \fBstrcat()\fP function appends the src string to the dest string, overwriting the terminating null byte ('\\0') at the end of dest, and then adds a terminating null byte\&. The strings may not overlap, and the dest string must have enough space for the result\&. \fP"
.ti -1c
.RI "char * \fBstrncat\fP (char *__s1, const char *__s2, size_t __n)"
.br
.RI "\fIThe \fBstrcat()\fP function appends the src string to the dest string, overwriting the terminating null byte ('\\0') at the end of dest, and then adds a terminating null byte\&. The strings may not overlap, and the dest string must have enough space for the result\&. \fP"
.ti -1c
.RI "char * \fBstrdup\fP (const char *s)"
.br
.ti -1c
.RI "int \fBatoi\fP (const char *a)"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define hex(c)   ( c<0xa ? c+'0' : (c-0xa)+'A' )"

.PP
Definition at line 122 of file string\&.h\&.
.SS "#define ishex(c)   \fBisnum\fP(c) || ( \fBtoupper\fP(c)>='A' && \fBtoupper\fP(c)<='F' )"

.PP
Definition at line 121 of file string\&.h\&.
.SS "#define isnum(c)   ( c>='0' && c<='9' )"

.PP
Definition at line 120 of file string\&.h\&.
.SS "#define tolower(c)   ( ( c>='A' && c<='Z' ) ? (c+0x20) : c )"

.PP
Definition at line 118 of file string\&.h\&.
.SS "#define toupper(c)   ( ( c>='a' && c<='z' ) ? (c-0x20) : c )"

.PP
Definition at line 119 of file string\&.h\&.
.SH "Function Documentation"
.PP 
.SS "int atoi (const char *a)"

.PP
Definition at line 425 of file string\&.c\&.
.SS "int memcmp (const void *s1, const void *s2, size_tn)"

.PP
The \fBmemcmp()\fP function compares the first n bytes of the memory areas s1 and s2\&. It returns an integer less than, equal to, or greater than zero if s1 is found, respectively, to be less than, to match, or be greater than s2\&. 
.PP
\fBReturns:\fP
.RS 4
The \fBmemcmp()\fP function returns an integer less than, equal to, or greater than zero if the first n bytes of s1 is found, respectively, to be less than, to match, or be greater than the first n bytes of s2\&. 
.RE
.PP

.PP
Definition at line 143 of file string\&.c\&.
.SS "void* memcpy (void *dest, const void *src, register size_tn)"

.PP
The \fBmemcpy()\fP function copies n bytes from memory area src to memory area dest\&. The memory areas should not overlap\&. 
.PP
\fBReturns:\fP
.RS 4
void 
.RE
.PP

.SS "void* memmove (void *dest, const void *src, register size_tn)"

.PP
The \fBmemmove()\fP method copies n bytes from memory area src to memory area dest\&. The memory areas may overlap\&. 
.PP
\fBReturns:\fP
.RS 4
The \fBmemmove()\fP function returns a pointer to dest\&. 
.RE
.PP

.SS "void* memset (void *dest, register intc, register size_tn)"

.PP
The \fBmemset()\fP function fills the first n bytes of the memory area pointed to by dest with the constant byte c\&. 
.PP
\fBReturns:\fP
.RS 4
The \fBmemset()\fP function returns a pointer to the memory area dest\&. 
.RE
.PP

.SS "int strcasecmp (register const char *s1, register const char *s2)"

.PP
The \fBstrcasecmp()\fP function performs case insensitive compare the two strings s1 and s2\&. 
.PP
\fBReturns:\fP
.RS 4
It returns an integer less than, equal to, or greater than zero if s1 is found, respectively, to be less than, to match, or be greater than s2\&. 
.RE
.PP

.SS "char* strcat (char *dest, const char *src)"

.PP
The \fBstrcat()\fP function appends the src string to the dest string, overwriting the terminating null byte ('\\0') at the end of dest, and then adds a terminating null byte\&. The strings may not overlap, and the dest string must have enough space for the result\&. 
.PP
\fBReturns:\fP
.RS 4
The \fBstrchr()\fP functions return a pointer to the matched character or NULL if the character is not found\&. 
.RE
.PP

.PP
Definition at line 411 of file string\&.c\&.
.SS "char* strchr (const char *s, intc)"

.PP
\fBReturns:\fP
.RS 4
The \fBstrchr()\fP functions return a pointer to the matched character or NULL if the character is not found\&. 
.RE
.PP

.PP
Definition at line 397 of file string\&.c\&.
.SS "int strcmp (register const char *s1, register const char *s2)"

.PP
The \fBstrcmp()\fP function compares the two strings s1 and s2\&. 
.PP
\fBReturns:\fP
.RS 4
It returns an integer less than, equal to, or greater than zero if s1 is found, respectively, to be less than, to match, or be greater than s2\&. 
.RE
.PP

.SS "char* strcpy (register char *dest, register const char *src)"
The \fBstrcpy()\fP function copies the string pointed to by src, including the terminating null byte ('\\0'), to the buffer pointed to by dest\&. The strings may not overlap, and the destination string dest must be large enough to receive the copy\&. 
.PP
\fBReturns:\fP
.RS 4
The \fBstrcpy()\fP and \fBstrncpy()\fP functions return a pointer to the destination string dest\&. 
.RE
.PP

.SS "char* strdup (const char *s)"

.PP
Definition at line 457 of file string\&.c\&.
.SS "size_t strlen (const char *s)"

.PP
The \fBstrlen()\fP function calculates the length of the string s, not including the terminating '\\0' character\&. 
.PP
\fBReturns:\fP
.RS 4
The \fBstrlen()\fP function returns the number of characters in s\&. 
.RE
.PP

.PP
Definition at line 370 of file string\&.c\&.
.SS "int strncasecmp (register const char *s1, register const char *s2, size_tn)"

.PP
The \fBstrcmp()\fP function compares the two strings s1 and s2\&. 
.PP
\fBReturns:\fP
.RS 4
It returns an integer less than, equal to, or greater than zero if s1 is found, respectively, to be less than, to match, or be greater than s2\&. 
.RE
.PP

.SS "char* strncat (char *__s1, const char *__s2, size_t__n)"

.PP
The \fBstrcat()\fP function appends the src string to the dest string, overwriting the terminating null byte ('\\0') at the end of dest, and then adds a terminating null byte\&. The strings may not overlap, and the dest string must have enough space for the result\&. 
.PP
\fBReturns:\fP
.RS 4
The \fBstrchr()\fP functions return a pointer to the matched character or NULL if the character is not found\&. 
.RE
.PP

.PP
Definition at line 470 of file string\&.c\&.
.SS "int strncmp (register const char *s1, register const char *s2, size_tn)"

.PP
The \fBstrcmp()\fP function compares the two strings s1 and s2\&. 
.PP
\fBReturns:\fP
.RS 4
It returns an integer less than, equal to, or greater than zero if s1 is found, respectively, to be less than, to match, or be greater than s2\&. 
.RE
.PP

.SS "char* strncpy (register char *dest, register const char *src, size_tlen)"
The \fBstrcpy()\fP function copies the string pointed to by src, including the terminating null byte ('\\0'), to the buffer pointed to by dest\&. The strings may not overlap, and the destination string dest must be large enough to receive the copy\&. 
.PP
\fBReturns:\fP
.RS 4
The \fBstrcpy()\fP and \fBstrncpy()\fP functions return a pointer to the destination string dest\&. 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for CARIBOU RTOS from the source code\&.
