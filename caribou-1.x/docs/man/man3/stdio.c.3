.TH "src/lib/stdio.c" 3 "Sat Jul 19 2014" "Version 0.9" "CARIBOU RTOS" \" -*- nroff -*-
.ad l
.nh
.SH NAME
src/lib/stdio.c \- 
.SH SYNOPSIS
.br
.PP
\fC#include <caribou\&.h>\fP
.br
\fC#include <caribou/kernel/thread\&.h>\fP
.br
\fC#include <caribou/lib/stdio\&.h>\fP
.br
\fC#include <caribou/lib/heap\&.h>\fP
.br
\fC#include <caribou/lib/string\&.h>\fP
.br
\fC#include <caribou/lib/stdarg\&.h>\fP
.br
\fC#include <caribou/dev/uart\&.h>\fP
.br
\fC#include <chip/uart\&.h>\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBPRINT_BUF_LEN\fP   12"
.br
.ti -1c
.RI "#define \fBPAD_RIGHT\fP   1"
.br
.ti -1c
.RI "#define \fBPAD_ZERO\fP   2"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "static int \fB_fd\fP (\fBstdio_t\fP *fp)"
.br
.ti -1c
.RI "\fBFILE\fP * \fBfopen\fP (int ndev, const char *mode)"
.br
.ti -1c
.RI "int \fBfclose\fP (\fBFILE\fP *fp)"
.br
.ti -1c
.RI "int \fBfflush\fP (\fBFILE\fP *fp)"
.br
.RI "\fIFLush the stream\&. \fP"
.ti -1c
.RI "int \fBfputc\fP (int c, \fBFILE\fP *fp)"
.br
.ti -1c
.RI "\fB__attribute__\fP ((weak))"
.br
.RI "\fIFormatted print to debug\&. \fP"
.ti -1c
.RI "int \fBfputs\fP (const char *s, \fBFILE\fP *fp)"
.br
.ti -1c
.RI "int \fBfgetc\fP (\fBFILE\fP *fp)"
.br
.RI "\fIRead a character from a stream of -1 if character not ready or eof\&. \fP"
.ti -1c
.RI "static void \fBprintchar\fP (\fBFILE\fP *fp, char **str, int c)"
.br
.ti -1c
.RI "static int \fBprints\fP (\fBFILE\fP *fp, char **out, const char *string, int width, int pad)"
.br
.ti -1c
.RI "static int \fBprinti\fP (\fBFILE\fP *fp, char **out, long i, int b, int sg, int width, int pad, int letbase)"
.br
.ti -1c
.RI "static int \fBprint\fP (\fBFILE\fP *fp, char **out, const char *format, \fBva_list\fP args)"
.br
.ti -1c
.RI "int \fBsprintf\fP (char *str, const char *format,\&.\&.\&.)"
.br
.RI "\fIFormatted print to FILE* stream\&. \fP"
.ti -1c
.RI "int \fBfprintf\fP (\fBFILE\fP *fp, const char *format,\&.\&.\&.)"
.br
.RI "\fIFormatted print to FILE* stream\&. \fP"
.ti -1c
.RI "int \fBprintf\fP (const char *format,\&.\&.\&.)"
.br
.RI "\fIFormatted print to FILE* stdout\&. \fP"
.ti -1c
.RI "int \fBfwrite\fP (\fBFILE\fP *fp, char *p, size_t len)"
.br
.ti -1c
.RI "int \fBfread\fP (\fBFILE\fP *fp, char *p, size_t len)"
.br
.ti -1c
.RI "int \fBfioctl\fP (\fBFILE\fP *fp)"
.br
.ti -1c
.RI "int \fBgetchar\fP ()"
.br
.ti -1c
.RI "int \fBputchar\fP (int ch)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "\fBstdio_t\fP * \fB_stdin\fP =0"
.br
.ti -1c
.RI "\fBstdio_t\fP * \fB_stdout\fP =0"
.br
.ti -1c
.RI "\fBstdio_t\fP * \fB_stderr\fP =0"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define PAD_RIGHT   1"

.PP
Definition at line 32 of file stdio\&.c\&.
.SS "#define PAD_ZERO   2"

.PP
Definition at line 33 of file stdio\&.c\&.
.SS "#define PRINT_BUF_LEN   12"

.PP
Definition at line 31 of file stdio\&.c\&.
.SH "Function Documentation"
.PP 
.SS "__attribute__ ((weak))"

.PP
Formatted print to debug\&. 
.PP
Definition at line 92 of file stdio\&.c\&.
.SS "static int _fd (\fBstdio_t\fP *fp)\fC [static]\fP"

.PP
Definition at line 35 of file stdio\&.c\&.
.SS "int fclose (\fBFILE\fP *fp)"

.PP
Definition at line 61 of file stdio\&.c\&.
.SS "int fflush (\fBFILE\fP *fp)"

.PP
FLush the stream\&. 
.PP
Definition at line 72 of file stdio\&.c\&.
.SS "int fgetc (\fBFILE\fP *fp)"

.PP
Read a character from a stream of -1 if character not ready or eof\&. 
.PP
Definition at line 110 of file stdio\&.c\&.
.SS "int fioctl (\fBFILE\fP *fp)"

.PP
Definition at line 370 of file stdio\&.c\&.
.SS "\fBFILE\fP* fopen (intndev, const char *mode)"

.PP
Definition at line 50 of file stdio\&.c\&.
.SS "int fprintf (\fBFILE\fP *fp, const char *format, \&.\&.\&.)"

.PP
Formatted print to FILE* stream\&. 
.PP
Definition at line 323 of file stdio\&.c\&.
.SS "int fputc (intc, \fBFILE\fP *fp)"
Write a character to the FILE* stream\&. return character written or -1 + errno if character was not written\&. 
.PP
Definition at line 83 of file stdio\&.c\&.
.SS "int fputs (const char *s, \fBFILE\fP *fp)"
Write a characters to the FILE* stream\&. return number of characters written or -1 + errno if characters where not written\&. 
.PP
Definition at line 99 of file stdio\&.c\&.
.SS "int fread (\fBFILE\fP *fp, char *p, size_tlen)"

.PP
Definition at line 365 of file stdio\&.c\&.
.SS "int fwrite (\fBFILE\fP *fp, char *p, size_tlen)"

.PP
Definition at line 360 of file stdio\&.c\&.
.SS "int getchar ()"

.PP
Definition at line 375 of file stdio\&.c\&.
.SS "static int print (\fBFILE\fP *fp, char **out, const char *format, \fBva_list\fPargs)\fC [static]\fP"

.PP
Definition at line 220 of file stdio\&.c\&.
.SS "static void printchar (\fBFILE\fP *fp, char **str, intc)\fC [static]\fP"

.PP
Definition at line 123 of file stdio\&.c\&.
.SS "int printf (const char *format, \&.\&.\&.)"

.PP
Formatted print to FILE* stdout\&. 
.PP
Definition at line 335 of file stdio\&.c\&.
.SS "static int printi (\fBFILE\fP *fp, char **out, longi, intb, intsg, intwidth, intpad, intletbase)\fC [static]\fP"

.PP
Definition at line 173 of file stdio\&.c\&.
.SS "static int prints (\fBFILE\fP *fp, char **out, const char *string, intwidth, intpad)\fC [static]\fP"

.PP
Definition at line 138 of file stdio\&.c\&.
.SS "int putchar (intch)"

.PP
Definition at line 380 of file stdio\&.c\&.
.SS "int sprintf (char *str, const char *format, \&.\&.\&.)"

.PP
Formatted print to FILE* stream\&. 
.PP
Definition at line 312 of file stdio\&.c\&.
.SH "Variable Documentation"
.PP 
.SS "\fBstdio_t\fP* _stderr =0"

.PP
Definition at line 28 of file stdio\&.c\&.
.SS "\fBstdio_t\fP* _stdin =0"

.PP
Definition at line 26 of file stdio\&.c\&.
.SS "\fBstdio_t\fP* _stdout =0"

.PP
Definition at line 27 of file stdio\&.c\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for CARIBOU RTOS from the source code\&.
