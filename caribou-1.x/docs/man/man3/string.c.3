.TH "src/lib/string.c" 3 "Sat Jul 19 2014" "Version 0.9" "CARIBOU RTOS" \" -*- nroff -*-
.ad l
.nh
.SH NAME
src/lib/string.c \- 
.SH SYNOPSIS
.br
.PP
\fC#include <caribou/lib/string\&.h>\fP
.br
\fC#include <caribou/lib/heap\&.h>\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "void * \fBmemcpy\fP (void *dst, const void *src, size_t size)"
.br
.ti -1c
.RI "void * \fBmemmove\fP (void *vdst, const void *vsrc, size_t n)"
.br
.ti -1c
.RI "void * \fBmemset\fP (void *s, int c, size_t n)"
.br
.ti -1c
.RI "int \fBmemcmp\fP (const void *s1, const void *s2, size_t n)"
.br
.RI "\fIThe \fBmemcmp()\fP function compares the first n bytes of the memory areas s1 and s2\&. It returns an integer less than, equal to, or greater than zero if s1 is found, respectively, to be less than, to match, or be greater than s2\&. \fP"
.ti -1c
.RI "char * \fBstrcpy\fP (char *dest, const char *src)"
.br
.ti -1c
.RI "char * \fBstrncpy\fP (char *dest, const char *src, size_t len)"
.br
.ti -1c
.RI "int \fBstrcmp\fP (const char *s1, const char *s2)"
.br
.ti -1c
.RI "int \fBstrcasecmp\fP (const char *s1, const char *s2)"
.br
.ti -1c
.RI "int \fBstrncmp\fP (const char *s1, const char *s2, size_t n)"
.br
.ti -1c
.RI "int \fBstrncasecmp\fP (const char *s1, const char *s2, size_t n)"
.br
.ti -1c
.RI "size_t \fBstrlen\fP (const char *str)"
.br
.RI "\fIThe \fBstrlen()\fP function calculates the length of the string s, not including the terminating '\\0' character\&. \fP"
.ti -1c
.RI "char * \fBstrchr\fP (const char *s, int c)"
.br
.ti -1c
.RI "char * \fBstrcat\fP (char *dest, const char *src)"
.br
.RI "\fIThe \fBstrcat()\fP function appends the src string to the dest string, overwriting the terminating null byte ('\\0') at the end of dest, and then adds a terminating null byte\&. The strings may not overlap, and the dest string must have enough space for the result\&. \fP"
.ti -1c
.RI "int \fBatoi\fP (const char *a)"
.br
.ti -1c
.RI "char * \fBstrdup\fP (const char *s)"
.br
.ti -1c
.RI "char * \fBstrncat\fP (char *dst, const char *src, size_t n)"
.br
.RI "\fIThe \fBstrcat()\fP function appends the src string to the dest string, overwriting the terminating null byte ('\\0') at the end of dest, and then adds a terminating null byte\&. The strings may not overlap, and the dest string must have enough space for the result\&. \fP"
.in -1c
.SH "Function Documentation"
.PP 
.SS "int atoi (const char *a)"

.PP
Definition at line 425 of file string\&.c\&.
.SS "int memcmp (const void *s1, const void *s2, size_tn)"

.PP
The \fBmemcmp()\fP function compares the first n bytes of the memory areas s1 and s2\&. It returns an integer less than, equal to, or greater than zero if s1 is found, respectively, to be less than, to match, or be greater than s2\&. 
.PP
\fBReturns:\fP
.RS 4
The \fBmemcmp()\fP function returns an integer less than, equal to, or greater than zero if the first n bytes of s1 is found, respectively, to be less than, to match, or be greater than the first n bytes of s2\&. 
.RE
.PP

.PP
Definition at line 143 of file string\&.c\&.
.SS "void* memcpy (void *dst, const void *src, size_tsize)"

.PP
Definition at line 24 of file string\&.c\&.
.SS "void* memmove (void *vdst, const void *vsrc, size_tn)"

.PP
Definition at line 57 of file string\&.c\&.
.SS "void* memset (void *s, intc, size_tn)"

.PP
Definition at line 113 of file string\&.c\&.
.SS "int strcasecmp (const char *s1, const char *s2)"

.PP
Definition at line 286 of file string\&.c\&.
.SS "char* strcat (char *dest, const char *src)"

.PP
The \fBstrcat()\fP function appends the src string to the dest string, overwriting the terminating null byte ('\\0') at the end of dest, and then adds a terminating null byte\&. The strings may not overlap, and the dest string must have enough space for the result\&. 
.PP
\fBReturns:\fP
.RS 4
The \fBstrchr()\fP functions return a pointer to the matched character or NULL if the character is not found\&. 
.RE
.PP

.PP
Definition at line 411 of file string\&.c\&.
.SS "char* strchr (const char *s, intc)"

.PP
\fBReturns:\fP
.RS 4
The \fBstrchr()\fP functions return a pointer to the matched character or NULL if the character is not found\&. 
.RE
.PP

.PP
Definition at line 397 of file string\&.c\&.
.SS "int strcmp (const char *s1, const char *s2)"

.PP
Definition at line 245 of file string\&.c\&.
.SS "char* strcpy (char *dest, const char *src)"

.PP
Definition at line 193 of file string\&.c\&.
.SS "char* strdup (const char *s)"

.PP
Definition at line 457 of file string\&.c\&.
.SS "size_t strlen (const char *s)"

.PP
The \fBstrlen()\fP function calculates the length of the string s, not including the terminating '\\0' character\&. 
.PP
\fBReturns:\fP
.RS 4
The \fBstrlen()\fP function returns the number of characters in s\&. 
.RE
.PP

.PP
Definition at line 370 of file string\&.c\&.
.SS "int strncasecmp (const char *s1, const char *s2, size_tn)"

.PP
Definition at line 356 of file string\&.c\&.
.SS "char* strncat (char *__s1, const char *__s2, size_t__n)"

.PP
The \fBstrcat()\fP function appends the src string to the dest string, overwriting the terminating null byte ('\\0') at the end of dest, and then adds a terminating null byte\&. The strings may not overlap, and the dest string must have enough space for the result\&. 
.PP
\fBReturns:\fP
.RS 4
The \fBstrchr()\fP functions return a pointer to the matched character or NULL if the character is not found\&. 
.RE
.PP

.PP
Definition at line 470 of file string\&.c\&.
.SS "int strncmp (const char *s1, const char *s2, size_tn)"

.PP
Definition at line 339 of file string\&.c\&.
.SS "char* strncpy (char *dest, const char *src, size_tlen)"

.PP
Definition at line 216 of file string\&.c\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for CARIBOU RTOS from the source code\&.
