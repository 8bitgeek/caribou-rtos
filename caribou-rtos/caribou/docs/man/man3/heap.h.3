.TH "include/caribou/lib/heap.h" 3 "Sat Jul 19 2014" "Version 0.9" "CARIBOU RTOS" \" -*- nroff -*-
.ad l
.nh
.SH NAME
include/caribou/lib/heap.h \- 
.SH SYNOPSIS
.br
.PP
\fC#include <caribou/kernel/types\&.h>\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "void * \fBmalloc\fP (size_t sz)"
.br
.ti -1c
.RI "void * \fBrealloc\fP (void *p, size_t sz)"
.br
.ti -1c
.RI "void * \fBcalloc\fP (size_t nmemb, size_t size)"
.br
.ti -1c
.RI "void \fBfree\fP (void *p)"
.br
.ti -1c
.RI "void \fBheap_init\fP (void *heap_base, void *heap_end)"
.br
.RI "\fIInitialize memory\&. \fP"
.ti -1c
.RI "int16_t \fBheap_block_size\fP (void)"
.br
.RI "\fIthe number of bytes per block \fP"
.ti -1c
.RI "int16_t \fBheap_blocks_allocated\fP (void)"
.br
.RI "\fItotal up all the blocks used\&. \fP"
.ti -1c
.RI "int32_t \fBheap_bytes_used\fP (void)"
.br
.ti -1c
.RI "int32_t \fBheap_bytes_free\fP (void)"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "void* calloc (size_tnmemb, size_tsize)"
The \fBcalloc()\fP function allocates memory for an array of nmemb elements of size bytes each and returns a pointer to the allocated memory\&. The memory is set to zero\&. If nmemb or size is 0, then \fBcalloc()\fP returns either NULL, or a unique pointer value that can later be successfully passed to \fBfree()\fP\&. 
.PP
Definition at line 176 of file heap\&.c\&.
.SS "void free (void *pointer)"
\fBfree()\fP frees the memory space pointed to by ptr, which must have been returned by a previous call to \fBmalloc()\fP or \fBrealloc()\fP\&. Otherwise, or if free(ptr) has already been called before, undefined behavior occurs\&. If ptr is NULL, no opera‐ tion is performed\&. 
.PP
Definition at line 186 of file heap\&.c\&.
.SS "int16_t heap_block_size (void)"

.PP
the number of bytes per block 
.PP
Definition at line 127 of file heap\&.c\&.
.SS "int16_t heap_blocks_allocated (void)"

.PP
total up all the blocks used\&. 
.PP
Definition at line 135 of file heap\&.c\&.
.SS "int32_t heap_bytes_free (void)"

.PP
Definition at line 145 of file heap\&.c\&.
.SS "int32_t heap_bytes_used (void)"

.PP
Definition at line 140 of file heap\&.c\&.
.SS "void heap_init (void *heap_base, void *heap_end)"

.PP
Initialize memory\&. 
.PP
Definition at line 119 of file heap\&.c\&.
.SS "void* malloc (size_tsize)"
\fBmalloc()\fP allocates size bytes and returns a pointer to the allocated memory\&. The memory is not cleared\&. If size is 0, then \fBmalloc()\fP returns either NULL, or a unique pointer value that can later be successfully passed to \fBfree()\fP\&. 
.PP
Definition at line 154 of file heap\&.c\&.
.SS "void* realloc (void *pointer, size_tsize)"
\fBrealloc()\fP changes the size of the memory block pointed to by ptr to size bytes\&. The contents will be unchanged to the minimum of the old and new sizes; newly allocated memory will be uninitialized\&. If ptr is NULL, then the call is equivalent to mal‐ loc(size), for all values of size; if size is equal to zero, and ptr is not NULL, then the call is equivalent to free(ptr)\&. Unless ptr is NULL, it must have been returned by an earlier call to \fBmalloc()\fP or \fBrealloc()\fP\&. If the area pointed to was moved, a free(ptr) is done\&. 
.PP
Definition at line 166 of file heap\&.c\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for CARIBOU RTOS from the source code\&.
